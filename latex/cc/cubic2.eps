%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: cubic2.pdf
%%Creator: Adobe Acrobat 15.6.0
%%For: leboudec
%%CreationDate: 18.09.2018, 17:43:41
%%BoundingBox: -426 425 278 703
%%HiResBoundingBox: -425.5166 425.5167 277.2305 702.7472
%%CropBox: -425.5166 425.5167 277.2305 702.7472
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1095 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-09-18T17:43+02:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2018-09-18T17:43:32+02:00"
   xmp:MetadataDate="2018-09-18T17:43:32+02:00"
   pdf:Producer="Acrobat Distiller 15.0 (Windows)"
   xmpMM:DocumentID="uuid:1021dadc-407c-43b0-b018-d1b40beb237f"
   xmpMM:InstanceID="uuid:bd57ac02-1cdf-4189-9511-125a66d9a3f5">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - cubic.pptx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>leboudec</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
^TFErz5;Fto+r_I$7l`R01+4ON)\j(f-64*,FC/D\[%sCmKl:lEZD!nXP'q^,XI>GrV3@!E"U"r.;aWq
Q[ABV!H"COn%13FBO*Q!q\uMXM.3BW3]r\3fXIGQ$>=hEe!W`<%%graF];qjV*Z#UmLi[VUIVNU-9g(Z
?((h,Y4"`,cR"KuIG[t=k6oHt(APlA,!<<*"68UM!*>TCj=%5[[RtcVYNd,dmMKO%]UQLR9^TFNu<;QK
B1&q80'Ft]SZD*t\F'`2XRY?ARN-BFe!)P$C!<<'!/0Z8<[AK\%C0"C;S;2e]!%/<X\>c=@8io*73%QT
\!<<'!"9S`+,T@[&]W8!\&.AsIG@G%fJ88p3LN.;NU5t:1\Z)FD!:8A=!.@37!2sQ2!7$r3*!QED^ek:
9IjbO%4q.\rmuIGKg2$llC/n:9ToP%)YF_5;?Pj%K^9+Ep$OI+>TK!/V^TFQu0-heC?VF/pVj3BQ@S]f
$SV`+f#R1J575m1+Z(R\OG%"hc>"D3bOaDC$+;l$sXdkc*Jo,?;^TFHs;R_l<Nal/sZuoF_glPDQs2\)
"s/o3F^TFEr-NF)g29)0skdZ)Ls1NT-c_,o&^TFKtPC@p1W0WWYUlg^=2_-BYQ%4<9CfjgB4u"bl@89T
!Y+:u2\#6"1Z_O1d2(9sSVj*<N'teSg0_`!h.f]MfDW/j@&HDb6*&/*,M8lgC&e,9MWgK#eHY6t!Yb.G
EE*QZPSr/=lBN%n3(_RG]<^fIXTT"b!"pG/1^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
^TFErz5;Fto+r_I$7l`R01+4ON)\j(f-64*,FC/D\[%sCmKl:lEZD!nXP'q^,XI>GrV3@!E"U"r.;aWq
Q[ABV!H"COn%13FBO*Q!q\uMXM.3BW3]r\3fXIGQ$>=hEe!W`<%%graF];qjV*Z#UmLi[VUIVNU-9g(Z
?((h,Y4"`,cR"KuIG[t=k6oHt(APlA,!<<*"68UM!*>TCj=%5[[RtcVYNd,dmMKO%]UQLR9^TFNu'Ft]
SZD*t\F'`2XRY?ARN-BFe/0Z8<[AK\%C0"C;S;2e]\>c=@8io*73%QT\"9S`+,T@[&]W8!\&.AsIG@G%
fJ88p3LN.;NU5t:1\Z)FD*!QED^ek:9IjbO%4q.\rmuIGKg2$llC/n:9ToP%)YF_5;?Pj%K^9+Ep$OI+
>TK!/V^TFQu0-heC?VF/pVj3BQ@S]f$SV`+f#R1J575m1+Z(R\OG%"hc>"D3bOaDC$+;l$sXdkc*Jo,?
;^TFHsNal/sZuoF_glPDQs2\)"s/o3F^TFErkdZ)Ls1NT-c_,o&^TFKtPC@p1W0WWYUlg^=2_-BYQ%4<
9CfjgB4u"bl@89T!Y+:u2\#6"1Z_O1d2(9sSVj*<N!%/<X!)P$C!.@37!2sQ2!7$r3!:8A=!<<'!!<<'
!FMOi-ijP&\Gk>W2''-.r70!9f&e,9MWgK#eHY6t!Yb.GEE*QZPSr/=lBN%n3(_RG]<^fIXTT"b!"pG/
1^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFE
r^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -702.747 translate
pgsv
[0 1 -1 0 277.23 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 702.747 li
277.231 702.747 li
277.231 0 li
cp
clp
gsave
373.179 764.53 mo
-100.401 764.53 li
-100.401 -77.3301 li
373.179 -77.3301 li
cp
eclp
-100.401 764.53 mo
373.179 764.53 li
373.179 -77.3401 li
-100.401 -77.3401 li
cp
false sop
0 0 0 0 cmyk
f
grestore
274.479 721.449 mo
274.479 353.169 li
-1.70052 353.169 li
-1.70052 721.449 li
cp
false sop
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
^TFR!z4YSPi+W;7!7Q3:,0d\4I)AEkc,odm)E*QWOY+;#4JS]-7XIGQ"Nd,dlVNd3LTT+k%"U"r.:d@;
HYF_5;F^\\`%13FBMKO%]ZD*t[-QX</[%j=jVj3ER=@Pg]!W`<%%LWXEZ_F+a*>TCjKPtcDHY6t!8io*
7((h,Y3@uf_PC@p1FC8J]68UP"@ST`#!<<*"5;Fto*#01g<CB:VQ@XQ?M0*hYL2_)JT8SLo[\fe';"X*
h2ZNe)'+YTRXdb]&Dd-HLQ%+67LiRMR!)=g?!;,XY.j6&9YF_5>BN%n3Q\'cC!%&6WZ([bQ7l`R02_-B
Y!<)ot"9S`+,9%R%Z_O1d&.AsIF'i8YI;!:'Jo,?<SV`+gZD!kT!91`n!-pg0!2<m%!60rt*!QED[nHu
+H6rjs4:MJphhD.3c"7+ZB2_b1S;;n`WgK#c>8IME[%sCo$OI+>RPkEO[ABRs/L)J?>=hHfU5t:0?VF2
qR=g)K#6b826T$b%XI>GqEaE&V=%5[[N-9@d*uGgpW0NNUIVNU-\uMXM;lkm#M-s?fX)M&KcA,74s1qD
Vl_7/s]r\3d.KBDc27ntZrlB)'k-0,B^m9ON\>Z4:O*PspUQCL7T8SOr2C^0VOEu4!C/n:94>/>f?;!u
nWL&f]Yb.JGXdkf-1FOXOU5t7-'shZV1$>>D/H=lJ@,oLl&-)Y5)_Vg(K#Fjj&If0LV36mAG@P+gX-o5
jD-:$ERY?ARA5H/)(D7>\;aNkPRtcVY"pG/1^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!~>
>>
/CSD add_res
/2 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 863.928 277.23 ]ct
[368.28 0 0 276.18 -444.219 589.448 ]ct
snap_to_device
<<
/T 1
/W 560 
/H 420 
/M[560 0 0 -420 0 420 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(P6$79
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcV&9JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(P6$79JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcV,;!!<*"!WrQ/r;cs(":+l+
JcUH(JcV&9ciF.Q$2sr5$4@7O%M&RO&I]$[_uYGjJcUH(ScKK<'GUoT!>ZIb!<F#T)AN>T)]Tmo!J1?(
!J1?(!U0Ui*ZlL2!<F>frW**G,UEit!<FDlXoX+TJcUH([/g@W!@S9O!<ahf(+Lj6!<F`'qZ-[Lkq@WA
g+NI\0rlsZ0BOnf/tN+C!<FSTquHsV1Gf+M2?!XV2Z!LT0?aFs0@U$u!<=ds!<=e8!<G,=kQ(Z:p]8nG
!&)Os!&*F7kQ(Z:bQ.\sdK.Jk!@S9Q!<tPF3ro?n4T5?^/0=Zh!&)b$qZ-[MbQ.\sbQ.\so`=Xb!]N)%
kQ(Z:bQ.\sirSEG!&)Os!&)\"r;cmORfNO<$2sr,,!J6j!<GFlrW**`&-2h1!<=ds!<=ds!<=eE!SRPS
0B`E<4[D$i!<=e3!UKge0?aFs0?sS"!<Fjt!<=ds!RLiO-j]nT"r/H`63eDV#q,gA6q-tR!&)Os!(P05
!(P05!(QDXqZ-a]5r[p,!(P05!(PcFn,WMYbQ.]5bQ._t!Ls/n-j]nT8,P"E8-(sf8P1-%!<FhSJcWmm
!D>Ac!J1?u!<=d\!RCcH0=:hF!<GhenH"4BRfNLBklI7S!&*R;JcXd1!D?.`!J1@7!<=dE!TjC_0:i3H
!<GqgfE$R)Z2jqYdK-WS!&)b$JcYZJ!DQ4G!J1@N!<=d.!W<$!08BSJ!<G,P^B&oeaT2ApbQ53S!&)Os
JcPm23.q<c!<FhSKE2*,!J1?t!<P2>2n/m?!RCcH0=:i,!<=d\!Lj)k4[D$m!J1?A!<=e;!Lj)i0BiLh
!TsIb4\I`+!J1@7!<=dE!TjC_0:i3N!<GhPdK+q#Z2jqYdK-WS!&)b$JcPrS!D?.A!J1@N!<=d.!W<$!
08BSP!<Ghg\H.9_aT2ApbQ53S!&)OsL]INO9DnmC!JCIS0*-_,!A=J*!Rq,N9M;VkJcX0u!&(_\cN+#!
[/ls%!B3"!!J1?A!<=e;!Lj)i0BiLh!UTmg2`R0*JcY!7!&'oEjoGH8ScQD'!^/h.bQ3:rZ2jqYdK-WS
!&)b$LB.N@5rSfFJcUH(r;cmOLB7>S!&'*.dfBM59/j0XJcWso!&)Os\,cR_bQ3_)!D?,\!J1?*!<FhS
KE2*,!J1@+!<GhfWr[eQcN+#![/nSS!&(_\VZHfjh>r3/RfNLBklI7S!&*R;JcYHD!DQ4M!J1@7!<=dE
!TjC_0:i3[!<Gke`;tPkZ2jqYdK-WS!&)b$N<'&=3;<N+!J1@N!<=d.!W<$!08BS]!<P2>4fna:!Qb?B
0?aI,!<=ds!L3Ze4[D$s!J1?*!<FhSKE2*,!J1@2!<PDD2l-P,!RCcH0=:i,!<=d\!NcA'9/kK(JcV>A
!&*R;RfNLBklHA:q#LLh9T0"(!TjC_0:i4,!<=dE!QG-@92<5&JcW.X!&)b$Z2jqYdK,O4!DZ;Y!J1?(
!W<$!08BT,!<=d.!T*nY9hV>aJcWso!&)Os\,cR_bQ416!B3[:!J1?*!<FhSKE2*,!J1@8!<G,=ScOED
cN+#![/nSS!&(_\ZiL4e3&f7dJcV>A!&*R;RfNLBklHA:!s(PN2hh?b!TjC_0:i4,!<=dE!R1WH4\I`E
!J1?X!<=e$!O;_+0@Blh!<GhPliD\=JcYfN!&'*.r;cmOLB6K;!D?.[!J1?o!<=ds!Or.10?aHj!<Ghg
j8ji5KE2*,!JCIS0*-Y*m/[5_9:,a3!RCcH0=:i,!<=d\!P/:49M<P0JcV>A!&*R;RfNLBklHP?!B3";
!J1?(!TjC_0:i4,!<=dE!Rh&M2`S)DJcW.X!&)b$Z2jqYdK-!A!^/h.joL&7JcYfN!&'*.r;cmOLB6`B
!^/h.RK8!@aT2ApbQ6#j!!<*"!X8c4r;cs(":+`'!&)OsVZ?fk2r4Re!JCIS0*.RD!=0#2!=KGN$k![K
!>#hO$PN::!A=J*!V6<m92(KLJcX0u!&(_\klDG2'GUoT!?)[T!?3"!)AN>T)]Tmq!<=d\!Pe^:923A+
JcV>A!&*R;[/gLR+!:jj!@8-Q!<XPn,n'\Q!@&rg!<=e;!K@*\:.t?_JcUH(joGH8ScK)t-NPV%!<FZ#
rW**P/Li:M!<F`'qZ6XK!(N[`f`;+J9<8/G!O`"/7f>!g!QkEH-j]nT))_Bo"#`%T2?!XV2Z!LT0@Blu
!<GkehZ8<0JcYfN!&'fB"XjZX!>%Bm!<Xko&3Tpm""YJo!W<$!08BT!!<G,=P6$79aT2ApbQ6&k"XjZX
!C-tj!<YFq5RIDj!B^qj!<=ds!NlG)2`NbK!J1?*!<FhSS,j3M#lt&S#q,gA6q&I0-il\'7Jd)d0*-Y*
q>gX\5rX`'JcX0u!&(_\k5bT3$2sr55S6R[+9;L.&P5S;q>gRL[/n;K!^/M%^B&oeRfNLBklI7S!&*R;
P5t\W2t@!$!J1@7!<=dE!TjC_0:i4%!<GheV?)8LZ2jqYdK-WS!&)b$X8r>p:>#Z"!J1@N!<=d.!W<$!
08BT'!<GqgN<+V3aT2ApbQ53S!&)OsZiL2%9@3cl!JCIS0*-_,!A=J*!<N9\98*Cu!RCcH0=:i,!<=d\
!R1WG2`S;JJcV>A!&*R;RfNLBklI4R!]N(tliD\=JcY!7!&'oEjoGH8ScRsS!^/h.TE0WFZ2jqYdK-WS
!&)b$ZN1+j9/k<#JcUH(r;cmOLB7>S!&'*.rW*$m2hqEc!Qb?B0?aI,!<=ds!P/:4923S1JcUN*!A=J,
!<FhSLB.EK:At9G!J1?u!<=d\!RCcH0=:i0!<GnfZ2oOXRfNLBklI7S!&*R;TE,'e9B?2+!J1@7!<=dE
!TjC_0:i42!<G,=R/qm?Z2jqYdK-WS!&)b$\H)aj3'GLeJcUH(r;cmOLB7>S!&'62"$Jq/!J1?(!Qb?B
0?aI,!<=ds!Pnd<4[D$G!J1?*!<FhSKE2*,!K@*\9/lVHJcUH(cN+#![/nSS!&(_\f`;+H9WS8H!Lj)i
0BiM,!<=e;!N#ku924:EJcUH(joGH8ScRsS!&'oEnc8bd99TC.!O;_+0@Bm,!<=e$!P\X99hWJ,JcUH(
r;cmOLB7>S!&'H8!B3[I!J1?(!Qb?B0?aI,!<=ds!QP3A2`SMPJcUN*!A=J,!<FhSPQ:hE3&gC/JcUH(
cN+#![/nSS!&(_\huNmB5rYYAJcV>A!&*R;RfNLBklIme!^/M%f`?[*JcY!7!&'oEjoGH8ScSTe!D>A2
!J1?X!<=e$!O;_+0@Bm?!<Ghe^]B#fJcYfN!&'*.r;cmOQN7+[:@eL<!J1?o!<=ds!Or.10?aIA!<Gqg
\,h0^KE2*,!JCIS0*.LB!DH/P!J1?(!RCcH0=:i,!<=d\!TjC`2`RE1JcV>A!&*R;RfNLBklJ*k!B3!d
!J1?(!TjC_0:i4,!<=dE!<`E(2aKBX!J1?X!<=e$!O;_+0@BmF!<PDM2nB$A!J1@N!<=d.!W<$!0:i1G
4\Ia$!J1?(!Qb?B0?aI,!<=ds!Rh&M9/j-WJcUN*!A=J,!<FhSTE,'d:#uD-!J1?u!<=d\!RCcH0=:iI
!<GhgR/qm?RfNLBklI7S!&*R;\H)_*9?[Eg!K[<`:Jap^!TjC_0:i4,!<=dI!<Z"g!<IcQJcXX-!`)Wi
g&V1,dK-WS!&)b$dK'A-33rX;!N?)$;H$KL!W<$!08BT,!<=dK!<P2>4m)it!J1@F!<Q+t;V2!M0?aI,
!<=ds!SRPU4[D$.!V-6l<E>:aYlXl$ec>e)!L<`f*<[/V!<NH.#PeB$0*.sO!^/h.hZ:Fl!EE1@!J1@O
!<Q%r;:P[I0=:i?!=Lt$$s,=f!>#hO$PN::!&(_\nc8ba2k'gK<EAttJcX$q!a&E"e,]P&klIsg%4>:G
!ErVA)AN>T)]Tmq!<=e;!P\X992*>+eH#\N<j2Ul!<QJ):[S8G!<=dE!Vug&-X6iV65NoR$iU/-,:<9g
!&(8O!D?/_!MKMp<EA/]JcXs6!`)Wid/a5#dK.;f#@85[?O?f`/,fPM/1p`"r@\.?ecFD(!DZ:i!UKgf
<E>LgZ2k#/<)V3H!(Qo?Q2q4!?XR;C@Mq'&!WP(X!W<$!0<,$R9hXCF\,cV1<m:Ys!<iK):Jb"dcN+#!
bQ5og#\.B`!<H54&3Tpm!A#;h!<=ds!T3tZ2bTtJnc8bk<g*Qr!<Q.u;9]+B0*.F@!G3k]!<XBU5RIDj
!B^qj!<FhSXT8G]37n8G!<H2$`rUts!`;oprW1=G!&(_\irKT)6tcU)BkA_!-il\'7Jd)c0=:iV!<P2>
2jFCE<EAttJcXC&!`)WhaoMJqklIpf$XQFs8nnA-5S6R[+Sl*=0BiMW!<PDM2o#HG!MTSr;,gHS!TjC_
0:i4,!<=dV!<PDW2tI'%!J1@@!<Q%n:r`S:0@Bm,!<=e$!T!hX9/iaLJcWLb!`;ooaoVGA!&'*.r;cmO
YQ4bt9\KN!!K$mZ:Jamc!Qb?B0?aI,!<=ds!TjC`92;)[JcWgk!`;p!_Z9ck!JCIS0*/B[!DZ;9!J1?9
!<Q.u>OqmA!<=d\!RCcH0=:f_!<GkeNWB/\<r2oL!T3t\:Jb"g^]=EgklI7S!&*R;bQ.`'34T(?!<H2$
YQ:j,!`;lnf`C49!&'oEjoGH8[/g:e3:$[>!<H2$j8ji5q>g[r<)?B(!<=e$!O;_+0@Bm_!<P2G2k^9=
!<H2$R/tA0"&D`m;SN82!<=d.!W<$!0=Lr`4[D$V!Or.2<E@?FQ2q(`;,gE_!Qb?B0?aI,!<=ds!UTmh
4\I`%!V-6l<E>:ad/a;G;c1")!A=J,!<FhS\H)_(9[!OO!<H2$`rVe5"&Vun:Zqi*!<=d\!RCcH0=_)c
92,EfM?*`X<r2oL!UKgh=B&6tZiL.[klI7S!&*R;dK0A@ZN8SW!EE1)!P/:6;H-UnblQr-!&'oEjoGH8
])_q,9BH8K!<H2$j8k&;"]A<!=9/H.!<=e$!O;_+0@Bme!<GkeRK8!@eH#bL<)cu*!W<$!08BT,!<=dd
!<G,=blNCsUB(Ho<)cu\!Qb?B0?aI,!<=ds!V6<n2`Nsa!J1@1!<c1q;cHYp!<FhSKE2*,!Pe^;4[D$H
!J1?T!<c1q;c-?E!RCcH0=:i,!<=dg!<PDD2u*K+!J1@L!<Z,%<)KIm!&*R;RfNLBklKE;!D>AR!J1?p
!<c1q<)c`/!TjC_0:i4,!<=dh!<GhehuTMP!EE1]!LNlj:Jk%f:[eCj!<=e$!O;_+0@Bmk!<GhfPQC+O
!EE0g!TjCc:Jk(j;5+*i!<=d.!W<$!0>dek:.rV.\,cV1<m:ZP!<c8(;c-HB!Qb?B0?aI,!<=ds!Vl`s
9hUEGnc8bk<g*RS!<c1q;cHV^!<FhSKE2*,!QG-@2bUmd^&\77<lY6V!<c1q;cHW8!RCcH0=:i,!<=dm
!<G,=nc=UK!EE1t!KR6b:Jk%i;,@#hRfNLBklI7S!&*R;hZ3d;3&d`9eH#\N<j2V]!<u>%;,^Fk:TOTZ
!<=dE!TjC_0?=.q4[D$\!MKMp<EA/]XT8T$;,C1j;;;2X!<=e$!O;_+0@Bmr!<PDW2i[q*!<H2$R0!3d
##A>u;cHUrNWK(Z!&'*.r;cmOaT2E82o,O)!<H2$blQ#h#>\5p<)c[k:VQqP!<=ds!Or.10?aG!!<Ghf
L&m25#Z";p<)Zan;?;FO!A=J,!<FhSbQ.`;::UCW!S[V\:Jt%d;cHRj;R$8K!<=d\!RCcH0?aFt:.spS
JcVqR#Z">q>>nHs;,Q6PRfNLBklI7S!&*R;jT,BU9:u<;!W<$+:JXhb:fC=m;,L5R!TjC_0:i4,!<=du
!<G,=dfG%$cN+AK;Gg:f;c?Y";,Y.0Z2jqYdK-WS!&)b$rW*$Y3/7O1!=hn$;HQe#:fC:l:f1(f:[S78
!W<$!08BT,!<=e"!<PDM2nK+#!<H2$blRV@&Pl2#=A_q":fL@l<)?dr;,U2[!Qb?B0?aI,!<=e#!<bPO
2ZWr2!V-6l<E@ZOrD3Gks&f7t%U2b+<)Z^p<)?dr;-6^ofE$X+!A=J,!<Ht9q,R:mpJq(kpJq(k!`_m0
qGmCnpJq(kpJq(kpJq(kpJq(k!*/eoqZ6FkqZ6Fk!)i_spJq)mrD`l!1]:>Q=T21lD>R3-DZ+JR;#XGo
;tt;9ED]S8;Gp<b<Vlgk<Vlgk<Vlgk<Vlgk<Vlgk<Vlgk<Vlgk<Vujt!V]UJ!<=d\!RCcHEqi]4!V]Xl
!V]Xl!<I7`q,[@npK%7orW2aoqZ6FlqZ6FlqZ6Fl!!3'p!E*%oFoPG>;uCh:GQ1M<>PD1q>Q%S'1O/k!
s'#J-r_`Djqbd)g!)ielrrMjpqZ6FlqZ6FlqZ6FlqZ6FlqZ6Fl!!2uupK%.lpK%.lpK%.lpK#uK!&*R;
RfNLBklL)N!D?.m!<Q%p=T2/#>>S9t;uT_t:g70';?'bu;?0Vo:Y>aL<E?=)JcY!7!&'oEjoGH8e,fSB
blR55&l2;*;,L.d;c?Xp:g6do=Ai$m`rQ3@<oa:5!O;_+0@Bm,!<=e'!<Ptg!PndG:Jt%e:f((i<)?Fh
=AmKHli@,e<g`u?!W<$!08BT,!<=e(!<Gke`;p?B;Gg:f;cH_#;-6`o!Or.2<E@?FJcWso!&)Os\,cR_
f)Yn23;<O&!=;P(;,C1j:f1(f])hI'!EE0a!JCIS0*-_,!A=K,!<P2>2pMF0:KUIj;cHsu;X"4r!<H2$
`rUbmcN+#![/nSS!&*"+!^/h.huWBL#>\2n;cHRj;OIQ;!Lj)i0BiM>!<O3M5lC]b"p>2,!<=e;!V-6m
4ZGCN!=)Cu;,C1j;,PC8JcUH(joGH8ScSWf$Re&]H@%"?&.o<Y')DV/0A6F-9/kH'##A)m;cHUlp]5sI
JcW.X!&)b$`W6Me3d^r/Bcn</!s'>\*W#j;0A?L.92,0_i;j-Y;-Qsu;,X@oJcUH(r;cmOQN7+sHMddE
,n'\Q"!],n!W<&t0*"K"!<Ghgg]7RS;,C4g;:tu%!J1?s!<>Uf0?aI@!=3:c/OU>&!@fW!!<F`'qZ-[M
h#ROO9C`,N!<l7r;cHUlS,n3BKE2*,!LNln7p0.!#<mVT2?!XV2Z!LU0*0r2!DQ5F!<l7r;cHUiblPNZ
!EE1@!J1?u!<=d\!TO1]J:[\#""Yu74T5?^/0=Zh!&*41!B3[2!<l7r;cHUirW.lW!EE1t!J1?A!<=e;
!NuM)5Cre7"#`&&$2sr+4:qAj!&*R;p]1CS391)D:Jk(j;,=CseH#\N<j2UV!TjC_0:i4@!=_AI,lns;
5UQjd!CK7DqZ-[Mi;j!=3&g"$"]%ul<)HQP!MKMp<EA/]JcW.X!&)b$`;p@"1PJF,!<GFt8P1-%!<=e4
!<PDM2tR.D!<c1q;cHk_!UKgf<E>LgJcYfN!&'*.r;cmOirK3E9/l)9"&W#s;8`LF!<H2$blNCsaT2Ap
bQ53S!&*@5!D>B<!<iL";,gLsL]R&I!EE0a!JCIS0*-_,!A=K8!<Ghfli@5b>?"Hq\cKMG!EE1@!J1?u
!<=d\!RCcH0BE3892=jT"&W#s;<n7?!<H2$qZ29LRfNLBklI7S!&*R;rW*$o9C;f_;,^FrScR@B!EE1)
!J1@7!<=dE!TjC_0BW?:9M=jU"A_ln:f#F=JcUH(Z2jqYdK-WS!&*O:!B3".!<Z+p;c*NjK)pQ)JcYfN
!&'*.r;cmOklCfD3:[(Q:Jk%f:UL4T!J1?o!<=ds!Or.10BrQ>4[D%!!<c1q;c-?c!J1?(!JCIS0*-_,
!A=K?!<PDM2tR+Q;,^=fWr[eQJcX0u!&(_\cN+#!lN%#Z2t[1R=B&*mh#W*.JcV>A!&*R;RfNLBli@/\
9EFkg"&Dlq;NLq0!<H2$YQ9=VjoGH8ScRsS!&*^?!D?/]!<Z,%<*7!<T`G0o<oa:5!O;_+0@Bm,!<=e@
!<GqgpAk=m<)N8gJcY3=!EE0g!J1@N!<=d.!W<$!0CJoB9hY6^!a&AuVZF:.!EE1F!J1?o!<=ds!Or.1
0CSuC2bWrI"&D`m;X4@8!V-6l<E>:aKE2*,!JCIS0*1VE!B3"6!<Q+t;4[g&!<H2$`rUbmcN+#![/nSS
!&*mD!]N(tqZ-ar<)M!CM?*`X<r2oL!Lj)i0BiM,!<=eE!<PDM2uE[W:Kmj!;M5)$!<H2$YQ9=VjoGH8
ScRsS!&*sF!^/M%quHk$<)L()T`G0o<oa:5!O;_+0@Bm,!<=eF!<GhPr;d!r:fL6T!J1@=!<H2$R/qm?
r;cmOLB7>S!&+!G!D?,b!<QA%;4IZ=!J1?o!<=ds!Or.10D5DI92>He"&D`m:Z)8*!J1?*!<FhSKE2*,
!VcZr:.tQe!`DroP6$79JcX0u!&(_\cN+#!p]1Ci9E"qn;,gH5!J1?(!Lj)i0BiM,!<=eK!<tJB!<Gtq
;>:0D!J1?(!TjC_0:i4,!<=eL!<tJB!<H%s;QKnN!J1?X!<=e$!O;_+0DbbR2aKAu:f-!LJcY3=!EE0g
!J1@N!<=d.!W<$!0DkhS4[D#&<)JeZ\,cV1<m:Ys!Qb?B0?aI,!<=eO!<kVZ2c3OPecC@'nc8bk<g*Q;
!<FhSKE2*,!WE*%9/f[DM#k<k!EE1@!J1?u!<=d\!RCcH0E(tS9868?]E*lj!EE1t!J1?A!<=e;!Lj)o
0*))HLK%1?!J1@&!<H2$YQ9=VjoGH8ScRsS"YTmNLf@0F!MKMp<EA/]JcW.X!&)b$Z2k%\9ScNq!J1@=
!<H2$R/qm?r;cmOLB7>S!f;e3M#k*e!EE1F!J1?o!<=ds!P&444c50B!J1@C!<H2$P6$=;!A=J,!<J,[
JcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS
!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rnc8bk<g*Q;!<FhSKE2*,!J1?d!<H2$
`rUbmcN+#![/nSS!&(_\M?*`X<r2oL!Lj)i0BiM,!<=e;!J1@&!<H2$YQ9=VjoGH8ScSNc!F:]a!<NH.
#PeB#0:i3<!<H2$j8ji5Z2jqYdK.5d#m1tH!<E`D$k!^E!<=e$!J1@=!<H2$R/qm?r;cmOPlV=\%5S+f
)AN>T)]Tk!!W<$!08BS<!<H2$blNCsaT2ApbQ5ie#"KqI"9BeVrW*$E-MmiB0*"Jg!J1@C!<H2$P6$I?
!(Qo?!!/De#CMO4@0?T\/,fPM/1p`"!A=J*!PSR8<E@-@JcX0u!&(_\irKEh<uh<M"9BAtrW3$WqZ-[M
[/l-c!EE1t!J1?A!<=e;!NuM02LQu%H4gGo4T5?^/0=Zh!&*R;JcUH(JcY!7!&'oEq>gR/ra>pjN]TK4
rW*$^&GlJ.0:i2r!J1?X!<=e$!Q"jD@0?TY#q,gA6q-tR!&)b$JcUH(JcYfN!&'N:#[mi:!C.5g8g+*6
r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/l-c!EE1t!J1?A
!<=e;!Lj)i0BiLh!S%2O<E?=)JcY!7!&'oEjoGH8ScPMc!EE1]!J1?X!<=e$!O;_+0@BlQ!UKgf<E>Lg
JcYfN!&'*.r;cmOLB4mc!EE1F!J1?o!<=ds!Or.10?aHK!V-6l<E>:aKE2*,!JCIS0*-Y*^&\77<lY5m
!RCcH0=:i,!<=d\!K$mY<EAttJcV>A!&*R;RfNLBklHA:eH#\N<j2UV!TjC_0:i4,!<=dE!MKMp<EA/]
JcW.X!&)b$Z2jqYdK+q#JcUH(r;cmOLB7>S!&'*.JcUH(aT2ApbQ53S!&)OsJcUH(KE2*,!JCIS0*-Y*
JcUH(cN+#![/nSS!&(_\JcUH(RfNLBklI7S!&*R;JcUH(JcY!7!&'oEjoGH8ScPMc!EE1]!J1?X!<=e$
!O;_+0@BlQ!UKgf<E>LgJcYfN!&'*.r;cmOLB4mc!EE1F!J1?o!<=ds!Or.10?aHK!V-6l<E>:aKE2*,
!JCIS0*-Y*^&\77<lY5m!RCcH0=:i,!<=d\!K$mY<EAttJcV>A!&*R;RfNLBklHA:eH#\N<j2UV!TjC_
0:i4,!<=dE!MKMp<EA/]JcW.X!&)b$Z2jqYdK+q#li@,e<g`u?!W<$!08BT,!<=d.!Or.2<E@?FJcWso
!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(
joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB4mc!EE1F!J1?o!<=ds!Or.1
0?aHK!V-6l<E>:aKE2*,!JCIS0*-Y*^&\77<lY5m!RCcH0=:i,!<=d\!K$mY<EAttJcV>A!&*R;RfNLB
klHA:eH#\N<j2UV!TjC_0:i4,!<=dE!MKMp<EA/]JcW.X!&)b$Z2jqYdK+q#li@,e<g`u?!W<$!08BT,
!<=d.!Or.2<E@?FJcWso!&)Os\,cR_bQ3:rnc8bk<g*Q;!<FhSKE2*,!J1?d!<H2$`rUbmcN+#![/nSS
!&(_\JcUH(RfNLBklI7S!&*R;JcUH(JcY!7!&'oEjoGH8ScOEDJcW.X!&)b$_uToA"9n`)!X8c4q#LIK
dK+q#JcUH(r;cmOQ2q@#$OdIS%fm4R$k!^I!W<$!08BR[!J1?o!<=ds!R(QR()IVb!>l[m'a"IU*$+nW
!&)OsJcUH(KE2*,!LNlg+X6md"!]';$iU/-,:<9gs"=F,01LWr^&\77<lY5m!Rh&L7f>!J!T*n\.2NaL
/,fPM/1p`"!&(_\M?*`X<r2oL!Lj)i0BiM=!<k571]\IOrW3$WqZ-[MklHA:eH#\N<j2UV!TjC_0:i4>
!<tPF3ro?n4T5?^/0=Zh!&'oET`G0o<oa:5!O;_+0@Bm?!<OH/5Q1Za5RIDj!B^qj!<=e$!J1@=!<H2$
R/qm?r;cmOQN7-l'd`iG#oY/t-il\'70*Gf!<=d.!Or.2<E@?FJcWso!&)OsbQ.]6r%A7F!C.5g8g*s2
!&)OsJcYEC!EE0a!JCIS0*-_,!A=J*!PSR8<E@-@JcX0u!&(_\cN+#![/l-c!EE1t!J1?A!<=e;!Lj)i
0BiLh!S%2O<E?=)JcY!7!&'oEjoGH8ScOEDJcW.X!&)b$Z2jqYdK+q#JcUH(r;cmOLB7>S!&'*.JcUH(
aT2ApbQ53S!&)OsJcUH(KE2*,!JCIS0*-Y*JcUH(cN+#![/nSS!&(_\JcUH(RfNLBklI7S!&*R;JcXC&
!EE1)!J1@7!<=dE!TjC_0:i3<!<H2$j8ji5Z2jqYdK-WS!&)b$JcY3=!EE0g!J1@N!<=d.!W<$!08BS<
!<H2$blNCsaT2ApbQ53S!&)OsJcYEC!EE0a!JCIS0*-_,!A=J*!PSR8<E@-@JcX0u!&(_\cN+#![/l-c
!EE1t!J1?A!<=e;!Lj)i0BiLh!S%2O<E?=)JcY!7!&'oEjoGH8ScPMc!EE1]!J1?X!<=e$!O;_+0@BlQ
!UKgf<E>LgJcYfN!&'*.r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\
cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcY3=!EE0g
!J1@N!<=d.!W<$!08BS<!<H2$blNCsaT2ApbQ53S!&)OsJcYEC!EE0a!JCIS0*-_,!A=J*!PSR8<E@-@
JcX0u!&(_\cN+#![/l-c!EE1t!J1?A!<=e;!Lj)i0BiLh!S%2O<E?=)JcY!7!&'oEjoGH8ScPMc!EE1]
!J1?X!<=e$!O;_+0@BlQ!UKgf<E>LgJcYfN!&'*.r;cmOLB4mc!EE1F!J1?o!<=ds!Or.10?aHK!V-6l
<E>:aKE2*,!JCIS0*-Y*JcUH(cN+#![/nSS!&(_\JcUH(RfNLBklI7S!&*R;JcUH(JcY!7!&'oEjoGH8
ScOEDJcW.X!&)b$Z2jqYdK+q#JcUH(r;cmOLB7>S!&'*.JcUH(aT2ApbQ53S!&)OsJcYEC!EE0a!JCIS
0*-_,!A=J*!PSR8<E@-@JcX0u!&(_\cN+#![/l-c!EE1t!J1?A!<=e;!Lj)i0BiLh!S%2O<E?=)JcY!7
!&'oEjoGH8ScPMc!EE1]!J1?X!<=e$!O;_+0@Bmu!<>U5!<>U5!<>U^!UKgf<EAMg!(P05!(PuLl2^lS
bQ.]5ciO(G!&'?5!X8c4r;lit!&)Os!&)Os!&*pEg&V1,huNjY<pftg0Auru!<=ds!<=du!<N9&0?aFs
0?aI8!<`rG$k!^E!<=ds!<=ds!<=ds!<=eA!V-6l<EAMg!&)Os!&*./n,WMBbQ.\sbQ._t!KdBe)AN>T
)]Tmq!<FhSblIetbQ.\sm/c,G!&*72!EE1g!<=e-!V-6k0?aFs0?aFs0E)!u!<=d\!Sd\V,n'\Q!@&rg
!<=a[08_C`CNB;*JhNTH!&!L:VuZoK/,fPM/1oi^JcUH(JcUH(o)Sk02?!XV2O=Gr!J1?(!P\X9&3Tpm
!A#;8!J1?(!J1?1!<GFlrW**`&-2f`!J1?(!L!Q'!<snX-il\'7E#:Z!J1?(!K[<b5S6R[+SYth!J1?(
!J1?(!J1?(!J1?(!J1?(!J1?(!J1?(!J1?(!OMk/"p>1Z!W)lt!mUfJ!sAeP!<NK/*VKNc!<HJcciF+c
rIb/SjT4ZJ!ZPW7ciF+cr.G%jdfKFK!Z_CZL]IY[&.o<Y'$^LY#RSfX"UYVG%1WpA!Sd\YO,t&dOj3t/
!uD+"!Ug$iITcXb!.W>r"XlEWH@%$f!<>@_'`hP\d/aA3&I_`!c2kQY"r\3Y!?3"!d/a:^'GUTSciF=d
(D?fM(`C^%#"'1?!KC>'nc@VK"%!GQ"OI/MI:1e1o)T%63d^r/Bct\%!e5h9dK'Iu=[N3n!Eg1q!<FJS
rW*!D!%-(o"!/O,$.&\R+X6md!@&lY!TO1b-NaAM'/),f!<Yh;@0G?do`5.r5T<&9!<H\VaoMTR#m(.U
!<soV"p%%,?+9pa!<FZ#rW*$N/^XS$-NPV%lN,uG!\"p$cN++d?4A16!VZTtI#\59"OR5R)I-u;>W0q0
"_N076kt1M!RUoK&sCQA"C;oX?OH*"T)es12?!XV2X:D*!<FSTblIl$1Gm\ap]1MWPEK8ddK'MT<uh<M
"OR5SPTuCn14t,T!S.8U7p0.!#<mXa!<NcO3TpM-!<im=?t!)FT`OEZ!>%Bm!<F_mcN+%p$.K"Q!<P8B
43@R)8J9GP"u^lX.!cL2q>o(H!=F,"!<I_%rW3$MkQ0oK!L4MJ!=!%E)?Bk>A^pgi!<GFlrW*$^&C^aY
!<FSTcN+(k5!R<n!GEhZ!<HgIp]9+M!##9>!]l?'dK'@t)?'X;/SF/Gm/[5PJc5]M2UDI*I3d/?!Wcm`
rW*$@B8Q]o-OD1%6UXAh!<FSTciF1P'd`iG!#kM2h#R^I=_Ih)&S')e!FZ,j!Up*o#?_-01(f#`!<tlB
,lns;5g]T6!BMXT!<s<-BE;:NB$ULi!<bY"8P1,N!<=MJ$.&\Q8,P"?8C.A?J/jjpOmrJ.!<HU3ciF8W
'hK-%h?!0J"GARb8dNcE![fX\c2e#R8kDVTC5)`j@OD2.!T=%\-UerM!V?Bo-XnII!<JN*aT9`h![hFq
[K1s\JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(P6$79JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcV&9JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(P6$79JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcV&9J,~>

%%EndBinary
grestore
np
275.259 358.509 mo
275.259 -9.77057 li
-.920517 -9.77057 li
-.920517 358.509 li
cp
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
^TFR!z4YSPi+W;7!7Q3:,0d\4I)AEkc,odm)E*QWOY+;#4JS]-7XIGQ"Nd,dlVNd3LTT+k%"U"r.:d@;
HYF_5;F^\\`%13FBMKO%]ZD*t[-QX</[%j=jVj3ER=@Pg]!W`<%%LWXEZ_F+a*>TCjKPtcDHY6t!8io*
7((h,Y3@uf_PC@p1FC8J]68UP"@ST`#!<<*"5;Fto*#01g<CB:VQ@XQ?M0*hYL2_)JT8SLo[\fe''+YT
RXdb]&Dd-HLQ%+67LiRMR.j6&9YF_5>BN%n3Q\'cCZ([bQ7l`R02_-BY"9S`+,9%R%Z_O1d&.AsIF'i8
YI;!:'Jo,?<SV`+gZD!kT*!QED[nHu+H6rjs4:MJphhD.3c"7+ZB2_b1S;;n`WgK#c>8IME[%sCo$OI+
>RPkEO[ABRs/L)J?>=hHfU5t:0?VF2qR=g)K#6b826T$b%XI>GqEaE&V=%5[[N-9@d*uGgpW0NNUIVNU
-\uMXMM-s?fX)M&KcA,74s1qDVl_7/s]r\3drlB)'k-0,B^m9ON\>Z4:O*PspUQCL7T8SOr2C^0VOEu4
!C/n:94>/>f?;!unWL&f]Yb.JGXdkf-1FOXOU5t7-!%&6W!)=g?!-pg0!2<m%!60rt!91`n!;,XY!<)o
tIBf;WeZFglGMd!f'%i]U6N@'V&If0LV36mAG@P+gX-o5jD-:$ERY?ARA5H/)(D7>\;aNkPRtcVY"pG/
1^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR
!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!~>
>>
/CSD add_res
/3 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 863.928 277.23 ]ct
[368.28 0 0 276.18 -81.2789 588.668 ]ct
snap_to_device
<<
/T 1
/W 560 
/H 420 
/M[560 0 0 -420 0 420 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(P6$79
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcV&9JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(P6$79JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcV,;!!<*"!WrQ/r;cs(":+l+
JcUH(JcV&9ciF.Q$2sr5$4@7O%M&RO&I]$[_uYGjJcUH(ScKK<'GUoT!>ZIb!<F#T)AN>T)]Tmo!J1?(
!J1?(!U0Ui*ZlL2!<F>frW**G,UEit!<FDlXoX+TJcUH([/g@W!@S9O!<ahf(+Lj6!<F`'qZ-[Lkq@WA
JhM^/jt?]eScSfk!@S9P!<k/31'&7KrW3$UqZ-[MbQ.\se,f@G!&)Os!&)Lr!&+*JeH#Y'bQ.\sjT4QG
!&)Os!&)b$aoMMk$2jl/2)[Ao!>%6i!<F_mqZ-[MdK04G!&)Os!&)Os!&+!Gf)Yk)bQ.\sirSEG!&)Os
!&)\"r;cmORfNO<$2sr,+uq^`!<G7grW**\&-2h1!<=ds!<=ds!<=eE!SRPS0?X@r0Auru!<=ds!<=du
!<N9&0?aFs0?aID!<sqY!<EB>-2p"3)CGh>!BiV2qZ-[MbQ.]/bQ.]/bQ.]/mfD5F!'na/!'o?@n,WMS
bQ.]/bQ._t!Ls/n-j]nT62WA?630.[6UW'n!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLB
klHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)Os
\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8
ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*
!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(
Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(
JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$
JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#!
[/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.
r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;
RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso
!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(
joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)OscN+"Ir;cs(
":+l+!X8c4q#LIKbQ3:rJcUN*!A=JD!<EH4rW*B<&I]$[!<E`D$k!^E!<FhSJcUH(JcX0u!&(_\klDG2
'GUoT!?)[T!?3"!)AN>T)]Tmq!<=d\!J1?(!Lj)i0BiMF!='Yf+:/&L,n'\Q"!]-=$iU/-,:<9g!&*R;
JcUH(JcY!7!&'oE#QZ:R-j]nT.P(K!""Z#R/,fPM/1p`"r@\.9U&fiHJcW:\!'pK9dK.Jk"XjZX!?!]m
!<Y/8))M6ms"sTR!&)b$JcUH(JcYfN!&'fB"XjZX!>%6i!<Xko&30Xi""YJo!W<$!08BR[!J1?o!<=ds
!RLiN-j]nT3skle"#piR$2sr+3"Yrf!&)OsJcUH(KE2*,!Ls0&-j]nT-OD1%4[)(X#q,g;5!SoF!A=J*
!J1?(!RCcH0=:iD!<FSTrW*Bg&OSr/!<G7o6UW'n!<=d\!J1?(!Lj)i0BiM,!<=e;!J1?(!J1@7!<=dE
!TjC_0:i2r!J1?X!<=e$!O;_+0@BlQ!J1?(!W<$!08BT,!<=d.!J1?(!Qb?B0?aI,!<=ds!J1?(!JCIS
0*-_,!A=J*!J1?(!RCcH0=:i,!<=d\!J1?(!Lj)i0BiM,!<=e;!J1?(!J1@7!<=dE!TjC_0:i2r!J1?X
!<=e$!O;_+0@BlQ!J1?(!W<$!08BT,!<=d.!J1?(!Qb?B0?aI,!<=ds!J1?(!JCIS0*-_,!A=J*!J1?(
!RCcH0=:i,!<=d\!J1?(!Lj)i0BiM,!<=e;!J1?(!J1@7!<=dE!TjC_0:i2r!J1?X!<=e$!O;_+0@BlQ
!J1?(!W<$!08BT,!<=d.!J1?(!Qb?B0?aI,!<=ds!J1?(!JCIS0*-_,!A=J*!J1?(!RCcH0=:i,!<=d\
!J1?(!Lj)i0BiM,!<=e;!J1?(!J1@7!<=dE!TjC_0:i2r!J1?X!<=e$!O;_+0@BlQ!J1?(!W<$!08BT,
!<=d.!J1?(!Qb?B0?aI,!<=ds!J1?(!JCIS0*-_,!A=J*!J1?(!RCcH0=:i,!<=d\!J1?(!Lj)i0BiM,
!<=e;!J1?(!J1@7!<=dE!TjC_0:i2r!J1?X!<=e$!O;_+0@BlQ!J1?(!W<$!08BT,!<=d.!J1?(!Qb?B
0?aI,!<=ds!J1?(!JCIS0*-_,!A=J*!J1?(!RCcH0=:i,!<=d\!J1?(!Lj)i0BiM,!<=e;!J1?(!J1@7
!<=dE!TjC_0:i2r!J1?X!<=e$!O;_+0@BlQ!J1?(!W<$!08BT,!<=d.!J1?(!Qb?B0?aI,!<=ds!J1?(
!JCIS0*-_,!A=J*!J1?(!RCcH0=:i,!<=d\!J1?(!Lj)i0BiM,!<=e;!J1?(!K[<`77Kf@!TjC_0:i4,
!<=dE!J1?(!Sd\W77Kf$!<=e$!O;_+0@BlQ!J1?O!<Pe`8DO=F!<=d.!W<$!08BR[!J1@F!<Pb`8D!qC
0?aI,!<=ds!J1@C!<GheP6%ohs$kQ?!A=J>!<O8E(B"78"p>2,!<FhSJcWRd!D?,,!J1@O!<P\^8(@V?
0=:i?!=Lgu$r&PZ!>#hO$PN::!&(_\M?*`N9`"jB!QtKF:.e(,!<=e;!NuM5-Vll+:eqiF'a"IU*$+nW
!&*R;JcXC&!D?+j!LNlh;+a:F!TjC_0:i4@!=1&N"p$h&;^DhN!<FDlqZ-[MScPMc!D?,I!J1@6!<P\Z
8'q>;0@Bm?!=)R@&lf8>.P(K!!A#i"!W=YO5h5sf!UKgf92(`SZ2k#%8k@G4!'pK9Q2q4!<E<0p=;`po
!WP"V!W<$!08BS<!<GheblNCs"T\Wm7S6+q!<=ds!R(QM=]u^E!DH]/3;rpZ/0=Zh!&)OsJcYEC!D?+M
!P8@684lCs!<FhSQiR4m/,fPO*aLi6rW*$Z&GlJ/0*-Y*^&\7-9ZI0i!<Pb`8H&Y9!<=d\!TO1i(-Z%*
:g[HT#q,g;5!SoF!&(_\M?*`N9`"jB!S%2P77Kbh!<=e;!NlG2<(')A?i^9i&OSr/q>gRLklHA:JcVSH
!_5jRj8nBD!&'oEjoGH8ScOEDJcY<@!_#RJ`rQ/ndK-WS!&)b$JcUH(]E&((8k7#)r;cmOLB7>S!&'*.
JcU`0!_#RJquOn?!&)Os\,cR_bQ3:rJcWgk!_5jX_Z9ck!JCIS0*-Y*JcV&9!_>p\o)[/<!&(_\cN+#!
[/l-c!D?,`!J1@1!<Yb[8k?_u!&*R;RfNLBklHA:eH#\D9X"Q"!<Pb_8(dq*!<=dE!TjC_0:i3<!<Ghe
j8ji5q>g[h8k)7_!<=e$!O;_+0@BlQ!UKgf92(`Sa8lB37S64d!W<$!08BT,!<=d.!Or.292*S2Q2q(V
7nQ;A!Qb?B0?aI,!<=ds!J1@C!<GheP6'&3!_5gP[fHL_!JCIS0*-Y*^&\7-9ZI1+!<Yh`7RcMAcN+#!
[/nSS!&(_\M?*`N9`"jB!UKgh:.e,LZiL.[klI7S!&*R;JcXC&!D?+j!P/:684lKFblQr-!&'oEjoGH8
ScPMc!D?,I!Jga[84lKL!<KJ,!&)b$Z2jqYdK+q#JcXC&"%PsU:9jp!!<=d.!W<$!08BR[!M]Yt7nQBK
j8m@'!&)Os\,cR_bQ3:rJcXd1"@YgP8k>r_!A=J,!<FhSJcUH(XoSYo7nH3>g&]M#!&(_\cN+#![/kj[
JcY`L"%?'Z8#64d0BiM,!<=e;!J1?(!QkEG77TsB8%o#d!<=dE!TjC_0:i3<!<Ghej8kVK"@YgP7n)nJ
Z2jqYdK-WS!&)b$JcY3=!D?+S!TjCc77TsB8"p%_!<=d.!W<$!08BS<!<GheblP0P"@l<\7nD,1aT2Ap
bQ53S!&)OsJcYEC!D?+M!V$0n77TpA8!sAY0*-_,!A=J*!PSR892*A,^]=R,7nH<Ca8sTf!&(_\cN+#!
[/l-c!D?,`!KR6b77TpA7n*7TRfNLBklI7S!&*R;JcXC&!D?+j!T!h]78??E8k2=O!TjC_0:i4,!<=dE
!MKMp92+CIXT8So7n-'B8)+-N!<=e$!O;_+0@BlQ!UKgf92(`SquI!j:.IlJ7o#'Fr;cmOLB7>S!&'*.
\,cV'9[*U^!=)%a7nQBC7n(/naT2ApbQ53S!&)OsJcUc1#Xq6R8kDWF8-+AE!A=J,!<FhSJcUH(gAqRK
84Q-@8k)<AYlW/O!&(_\cN+#![/kj[X8rSq84QNK8Oc3?huT;J!&*R;RfNLBklHA:JcYfN$:RBR7n-'B
8k2BBOTFSF!&'oEjoGH8ScOEDcN+AA84Q0>8P)NO7nCAqZ2jqYdK-WS!&)b$JcVYJ%RifW:.J/N8P)ND
7n6*=mK%n?r;cmOLB7>S!&'*.\,cV'9[*V6!>.ah85;ZF;+=/L8P2HL7n6*=S,p_4!&)Os\,cR_bQ3:r
nc8ba9\'7C7K5pY:B!`n;+=#I8P)NH7SuZG:.Rq.!JCIS0*-_,!F\Xs9D\ba9D\ba9D\ba9D\ba9D\ba
9D\ba9D\ba9D\_i9DD0W!V]7a!V]4e8Gl6W9D_K_9*%^@rCd,br^Z]lqa^NnrF>mtr_!2^pgjYA7n6<F
84E8GqZ6FaqZ6FaqZ6FaqZ6FaqZ6FaqZ6FaqZ6FaquHcupIj3@!&(_\cN+#Ype:PcpItGbpItGbpItGb
pItPerW2aeqZ6FbqZ6FbqZ6Fb!!3'f!D#u[B`C^'8c3<#CB$d%;>3c];>j/h0l-_]s%rbnr^Z]Vqa^BS
!(d)XrrMjfqZ6FbqZ6FbqZ6FbqZ6FbqZ6Fb!!2uupItGbpItGbpItGbpIs9A!&*R;RfNLBklI4R!_#XT
r^R)g7S66Dr^m5];,R<_s%`Sb!(d)Xf`;+H9X"PL!TjC_0:i4,!<=dE!U]t$77BsA7n,s>8P2TE;+F,O
84Z1i!<Ghej8ji5Z2jqYdK-WS!&)b$_#Y!684Q0>7S-3E7RosD8C.D(!<GheR/qm?r;cmOLB7>S!&']?
$UmTV7n-'B8l8)R8GiLu!<GheblNCsaT2ApbQ53S!&)OsdK'YC:.IcF8k)<@8@non!<GheP6$=;!A=J,
!<FhSUB(Wh:.IcF8l8)LklJL!!D?,,!J1?u!<=d\!RCcH0=:iO!=)%`7S-3A7nB$KJcV>A!&*R;XT8JB
=ZcQ_!X8c4q#LIKklJ[&#=V0R7S-3B8&t^_!J1@7!<=dE!Vla(-oPmYDC5Gr&I]$[q>gRLXoS_q7n-'B
7nECUJcUH(Z2jqYdK.>g%2q-C!<HOM)AN>T)]Tmq!<=e$!T=%`77U3H8k2FO!J1?(!W<$!0:)\?=`+';
!@8-Q!<XPn!<N-"r@\.9\H)k&7n-*?8(dop!J1?s!<>C`0?aI@!=2qL/Nsnh!@fW!!<F`'qZ-[MbQ7)3
"[tpQ8k2FB!J1?*!<FhSQiRIY:K.?"3H>unrW3$UqZ-^N!PAF:77TpA7n(Z'^&\7-9ZI0c!RCcH0=:i@
!<I7`rW**P/.af?!<F_mqZ-[M^&\C+7nH<C7K*=F!<GheqZ29LRfNLBklIsg!BP?%!<Y/83skle!B:Yf
!<=e;!SIJW77TsB7n'W_eH#\D9X"PL!TjC_0:i4@!=_/6,lns.4!t=_!BiV2qZ-[M_uU$17n-*@8DsTC
!<Ghej8ji5Z2jqYdK.;f$[4=M6jNeo3tXhJ+Sl*=0@Bmo!<bh]8P2aA!UKgf92(`SJcYfN!&'*.r;cmO
a8lB58kMUl!Or.292*S2JcWso!&)Os\,cR_bQ.kJ77TsB:5ArA!<GheP6$=;!A=J,!<FhSc2e&:;+a>I
\cKMG!D?,,!J1?u!<=d\!RCcH0@'Y$7nQBDlN)kD!D?,`!J1?A!<=e;!Lj)i0BiN%!<Yh`8ktrYeH#\D
9X"PL!TjC_0:i4,!<=e&!<bh]8Oc.q!J1?(!O;_+0@Bm,!<=e(!<Yb\8OibLK)pQ)JcYfN!&'*.r;cmO
fDu+D7nH3>[/kj[JcWso!&)Os\,cR_g&V=F7nH3>p]5sIJcUN*!A=J,!<FhSg]7LI8Ol4M!J1?(!RCcH
0=:i,!<=e/!<Z(h7Rc,6JcUH(RfNLBklI7S!&*R;pAk@b8kMX9!S%2O92)PjJcY!7!&'oEjoGH8i;j$L
;+aU#!MKMp92+CIJcW.X!&)b$Z2jqYiW0*N8k8LSJcY3=!D?+S!J1@N!<=d.!W<$!0B<-8:.[sR!Or.2
92*S2JcWso!&)Os\,cR_joGQQ7S65;!J1@C!<GheP6$=;!A=J,!<FhSkQ(`T8k5HR^&\7-9ZI0c!RCcH
0=:i,!<=e;!<Pea8'h9o!<GheqZ29LRfNLBklI7S!&*X=!C]id8k=U9eH#\D9X"PL!TjC_0:i4,!<=e>
!<Q"g8%&Gl!<Ghej8ji5Z2jqYdK-WS!&*a@"%>[O7Hji)!UKgf92(`SJcYfN!&'*.r;cmOmf<Jb8Oo9O
JcUH(aT2ApbQ53S!&*jC"%>[O7Gn2u!J1?*!<FhSKE2*,!V6<n84c=8!J1?(!RCcH0=:i,!<=eE!<Pb`
8B([^!J1?A!<=e;!Lj)i0D,>I77p)F!J1?(!MBJkH2N!eHi8<lH1h:$!<=dE!TjC_0D5DJ7nQ=R!J1?5
!W76AHMr3gI/SKkIf4coJGaoqIf4]nHiSKI!<=e$!O;_+0DGPL77Kc'!J1@=!<GheR0!9fr-A6erHnHi
rI+TmrI=`qr."ZorI+TkrHnHgrHZHbr;cmOLB7>S!&+-K!_#^OOo`&n!D?,2!U^!dH2W'fHi/9iIJeQm
J,FipJ,OipIJeKkHi/3gH.W/>!<=ds!Or.10DY\N7nQ>'!J1@C!<Gheh?!P"rHeEhqgA?jrI4]pr.+]p
rI4]nqgA?hrHeEfq#Q-L!A=J,!<FhSquQgeM#k<k!DA"BH2W'eHi/9iIJnWnJ,FipJ,FcoIJeKkHi/3h
H&;XK!<=d\!RCcH0DtnQ77Ke[!NcD#H2N!eHi/9iIJeQmJ,OoqJ,ausIf4]mI/SEiHMr,Y!Lj)i0BiM,
!<=eP!<Pea8FHSM!W76@HMr3gI/SKlIK4iqJ,FipJ,OipIJeKkHi/3gH2[gF92)PjJcY!7!&'oEjoGW=
!<G\_7BHUgH2W$hHiABiI/SKkIf4coJGaoqIf4]mI/SEiHMr-C!<Ghej8ji5Z2jqYdK-WS""s[E7b%P:
!W76AHMr3gI/SKkIf4coJGaoqIf4]mI/SEiHMr-4!UKgf92(`SJcYfN!&'*.r;ctO7S!"Mr-A6erHnEh
rI+WnrI=`qr."ZorI+QjrHnKhrH[,u\,cV'9[*Ti!Qb?B0?aI-!<P]BK`6DuIf4coJGaoqIf4]lI/SEi
HN&3f!J1@C!<GheP6$=;!A=J,!<In$rd4QhrcsJ(JcUH(cN+#![/nSS!&(_\JcUH(RfNLBklI7S!&*R;
JcUH(JcY!7!&'oEjoGH8ScOEDJcW.X!&)b$Z2jqYdK+q#JcUH(r;cmOLB7>S!&'*.JcUH(aT2ApbQ53S
!&)OsJcYEC!D?+M!JCIS0*-_,!A=J*!PSR892*A,JcX0u!&(_\cN+#![/l-c!D?,`!J1?A!<=e;!Lj)i
0BiLh!S%2O92)PjJcY!7!&'oEp&P1mLAh2T"p>2,!<=dE!MKMp92+CIJcW.X!&)b$_Z:&G(Baa>&.o<Y
')DV/0@BlQ!UKgf92(`SJcYfN!&'T<%6P(S"9BDU!s'>\*<?3>!<=d.!Or.292*S2JcWso!&)OsaoM]4
,Zb*L,n'\Q!@&rg!W=YO5gTO`!V-6l92(NML]IK@r@\-OQN7>0LB1HZ!@fW!!<F`'qZ-^N!J1?d!<Ghe
`rUbmcN+#![/o:g#Z+59!ETC)))M6ms"sTR!&(_\M?*`N9`"jB!Lj)i0BiM@!=1N$-n&pF#7rlo!<F_m
qZ-[MklHA:JcUH(joGH8ScSZg!##94"?)#o3skle!B:Yf!<=dE!J1?(!O;_+0@Bm<!=;g1!@J1%!BiV2
qZ-[MdK+q#JcUH(r;cmOP5tqj"9ANb&OSr/rW2ru!&'*.JcUH(aT2ApbQ53S!&)OsJcUH(KE2*,!JCIS
0*-Y*JcUH(cN+#![/nSS!&(_\M?*`N9`"jB!Lj)i0BiM,!<=e;!J1@&!<GheYQ9=VjoGH8ScRsS!&'oE
T`G0e9]Q5+!O;_+0@Bm,!<=e$!J1@=!<GheR/qm?r;cmOLB7>S!&'*.\,cV'9[*Ti!Qb?B0?aI,!<=ds
!J1@C!<GheP6$=;!A=J,!<FhSJcWRd!D?,,!J1?u!<=d\!RCcH0=:h<!<GheqZ29LRfNLBklI7S!&*R;
JcXC&!D?+j!J1@7!<=dE!TjC_0:i3<!<Ghej8ji5Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-
JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:
JcUH(joGH8ScRsS!&'oET`G0e9]Q5+!O;_+0@Bm,!<=e$!J1@=!<GheR/qm?r;cmOLB7>S!&'*.\,cV'
9[*Ti!Qb?B0?aI,!<=ds!J1@C!<GheP6$=;!A=J,!<FhSJcWRd!D?,,!J1?u!<=d\!RCcH0=:h<!<Ghe
qZ29LRfNLBklI7S!&*R;JcXC&!D?+j!J1@7!<=dE!TjC_0:i3<!<Ghej8ji5Z2jqYdK-WS!&)b$JcY3=
!D?+S!J1@N!<=d.!W<$!08BS<!<GheblNCsaT2ApbQ53S!&)OsJcUH(KE2*,!JCIS0*-Y*JcUH(cN+#!
[/nSS!&(_\JcUH(RfNLBklI7S!&*R;JcUH(JcY!7!&'oEjoGH8ScOEDJcW.X!&)b$Z2jqYdK+q#JcUH(
r;cmOLB7>S!&'*.\,cV'9[*Ti!Qb?B0?aI,!<=ds!J1@C!<GheP6$=;!A=J,!<FhSJcWRd!D?,,!J1?u
!<=d\!RCcH0=:h<!<GheqZ29LRfNLBklI7S!&*R;JcXC&!D?+j!J1@7!<=dE!TjC_0:i3<!<Ghej8ji5
Z2jqYdK-WS!&)b$JcY3=!D?+S!J1@N!<=d.!W<$!08BS<!<GheblNCsaT2ApbQ53S!&)OsJcYEC!D?+M
!JCIS0*-_,!A=J*!PSR892*A,JcX0u!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS
!&'oEJcUH(Z2jqYdK.8e!WrQ/r;cs(":+`'!&)b$JcUH(JcYfN!&'W=$OR7M%1WmL&.o<Y')hq1!<=d.
!J1?(!Qb?B0?aI@!=]e\'*/+N)&a4l!?3"!qZ-[MbQ3:rJcUN*!A=J@!<F>frW**G,UEit!<FDlqZ6^M
!\Z2lK`Smg!D?,,!J1@$!<>C`0=:i<!<ahf(+Lj6!<F`'qZ-[M[/l-c!D?,`!J1?A!<=e;!NZ;*0JP<`
))M6ms"sTR!&*R;JcXC&!D?+j!J1@7!<=dE!Vc["2)[Ao!>%6i!<F_mqZ-[MScPMc!D?,I!J1?X!<=e$
!Q>'@+uq^`!<G7grW*$Z&GlJ.0@BlQ!UKgf92(`SJcYfN!&'Z>!X9Acr]CK*-OD1%4[)(2!W<$!08BS<
!<GheblNCsaT2ApbQ5og!($N9#!r>P&OSr/q>gRLbQ3:rnc8ba9ToL1!<FhSKE2*,!J1?d!<Ghe`rUbm
cN+#![/nSS!&(_\M?*`N9`"jB!Lj)i0BiM,!<=e;!J1@&!<GheYQ9=VjoGH8ScRsS!&'oEJcUH(Z2jqY
dK-WS!&)b$JcUH(JcYfN!&'*.r;cmOLB2u-JcWso!&)Os\,cR_bQ3:rJcUN*!A=J,!<FhSJcUH(JcX0u
!&(_\cN+#![/kj[JcV>A!&*R;RfNLBklHA:eH#\D9X"PL!TjC_0:i4,!<=dE!MKMp92+CIJcW.X!&)b$
Z2jqYdK+q#li@,[9UPp5!W<$!08BT,!<=d.!Or.292*S2JcWso!&)Os\,cR_bQ3:rnc8ba9ToL1!<FhS
KE2*,!J1?d!<Ghe`rUbmcN+#![/nSS!&(_\M?*`N9`"jB!Lj)i0BiM,!<=e;!J1@&!<GheYQ9=VjoGH8
ScRsS!&'oET`G0e9]Q5+!O;_+0@Bm,!<=e$!J1@=!<GheR/qm?r;cmOLB7>S!&'*.JcUH(aT2ApbQ53S
!&)OsJcUH(KE2*,!JCIS0*-Y*JcUH(cN+#![/nSS!&(_\JcUH(RfNLBklI7S!&*R;JcUH(JcY!7!&'oE
joGH8ScOEDJcW.X!&)b$Z2jqYdK+q#li@,[9UPp5!W<$!08BT,!<=d.!Or.292*S2JcWso!&)Os\,cR_
bQ3:rnc8ba9ToL1!<FhSKE2*,!J1?d!<Ghe`rUbmcN+#![/nSS!&(_\M?*`N9`"jB!Lj)i0BiM,!<=e;
!J1@&!<GheYQ9=VjoGH8ScRsS!&'oET`G0e9]Q5+!O;_+0@Bm,!<=e$!J1@=!<GheR/qm?r;cmOLB7>S
!&'*.\,cV'9[*Ti!Qb?B0?aI,!<=ds!J1@C!<GheP6$=;!A=J,!<FhSJcUH(JcX0u!&(_\cN+#![/kj[
JcV>A!&*R;RfNLBklHA:JcUH(joGH8ScRsS!&'oEJcUH(Z2jqYdK-WS!&)b$JcUH(JcYfN!&'*.r;cmO
LB2u-JcWso!&)Os\,cR_bQ3:rnc8ba9ToL1!<FhSKE2*,!J1?d!<Ghe`rUbmcN+#![/nSS!&(_\M?*`N
9`"jB!Lj)i0BiM,!<=e;!J1@&!<GheYQ9=VjoGH8ScRsS!&'oET`G0e9]Q5+!O;_+0@Bm,!<=e$!W)lt
5g06/5g06/5kP0E!<GhemK!;QbQ.]/irSEG!'na/!'nm3r;cmONWB1c":+l+r;cmObQ.\sbQ.\so)[PG
!&*72!D?,S!<=e3!UKge0?aFs0?sS"!<Fjt!<=ds!Q5!A&.o<Y')DV/0?aFs0?aFs0?aFs0CJr4!<Ghe
mK!;@bQ.\sh#[!G!&)Os!&)Os!A=J9!<sGW!s'>\*W#j<0*0;u!&)Os!&*^?huNg2huNjO9^Vo]0A?Nu
!<=ds!<=ds!<=eP!RCcH0=:i9!<FJSrW*$E-MmfD0"!?i0*,Koq_*OSRkFaoklI^`!@fW!!<F`'iW4W3
JcUH(JcYHD!?!]m!WP!C!J1?(!J1?e!<E`krW*$N*m4S9!J1?(!K-sZ3skle"#phm!J1?(!J1?9!Q>'D
-OD1%4[)*L!J1?(!J1?6!<bIr6UW'l!J1?(!J1?(!J1?(!J1?(!J1?(!J1?(!J1?(!J1?(!J1?Z!<NH.
#LWYM!<<2H!<N?+"jI&L#6Z(@!S7>Q;hiX"!#tl\!)VbXlN%&+=Zat2!#ti[!$0MhrW*'@";Zdo"T]/H
$k!]n!<EH4cN+1V$OdIS&+otY!<e48'O$C>!<N?>"QBIN!<I19rY5ERciF:u2Jd5J-di"q3rKco;BF3d
"?-o$9f1,r]E&3T'a"IU*$*E-!YZ7_!"%!Q"r8!g!<F#Td/aG7(D?h(;B,0-hZ3gA%5A"4!<I.?gB$mH
"r]C<!<HOMc2dueFq`:)"=Hu.!Diem(5`+n,n'\Q!$_Ijd/a=j+!:m:!<F>frW*$E,jtco!<snR!<Eie
0[Kh&5pTM7g]@'K"&1ir4O4$/=`):^"'>j2!R^uQ-W1-L4;Ur+!Rh&M.P(K!!A#hM!<X\M-jf2?iW0*0
(Db<t!ub,J,h`:n!<d=r!ETEO!<jB>?T(e=ciF;TE%O6gEW-!d!<EgkcN+/J(_TgUlN*UY!?!]m!WP"B
!Ta=_-je-!!\c>af)bXI"GVkn<>3d]"].o6!ETEO!="N.N<(_VF8Q'i!<thc;um4aEmOgg%idIj!U'Of
$rp>09N[thl2^ns3;rpZ/0<+<!@S9(!W)m!2)[D9!<GP#dK'P/E%!,O&dS76e,]RWCs`7aF*.B^s"*@7
klCgF(s`3e=]u^E!DH_J!O`"03skle!B:Y?!W2s!-je3#![9Wcc2drP-N4#H>nm&7gAq9er`9.ZLH!W^
!@\oc!<FcXjT4`L!BP?%!WP"'!<I-bciF1K>V#dS!?PO(!<snX-ilIp5L0?2-je6$!X9Acr]C0!o`<kL
#!Gag!C%0!c2drI"QBIO!<rd)!s((fEmXml4EVqN)g4<j!<N9[.*hnu(-Z%*:g[JR!P8@83tXhJ+O0uf
-iaS#!<>F`0*">c!<dH`NuX&I!SmbW<s6kN"BH7)'fXtMnc8l;0mH(lciF1q08@aQ"&qZU6i^VL!<Q@N
!J1@2!<OW5)PmK,!<OWN-d2SlO;c4AciF1q=;nUKJcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcV&9JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(P6$79JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcV&9JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(P6$1~>

%%EndBinary
grestore
np
.874144 .544152 0 .000335698 cmyk
%ADOBeginSubsetFont: IBAAAA+Cambria-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IBAAAA+Cambria)
%%Title: (IBAAAA+Cambria Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IBAAAA+Cambria def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2463 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 6997 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1849 <001C60D8A8C9B5D87315ACB9B8BE3EE44C62E38868F50023162764DA52
8966BDD3A456462A547524E0B9BB9BD15BB5D98B8BED9E6A8D6B2A17237D81BE
8E3343681B396EA2F970B3B934226C9D38C56B7D03732C51E45E477C538F9D46
121A4AD65E4A94550DE50B15028E52787DE4BCACE4FF6E9DAD2734388557E2A4
0A9C2BD1E47BF086D440506B17668CD42C14A640A42DB003C4C25EB819913CA1
8A22346C756149E57E03F0819FF5FF126DFC8477C0BB16D6B7CC717BC478> |
4666 <001C60D8A8C9B71C16F31928ABEFFFF017561191015F2898C46D07A640
C9AAA59E42A52B1A58A0A78B02C4647FB5FBB6648C88F1A7AF596C0453B90691
5DDC60C338C117F633ECA49DCF0695E4CFA67F27CD> |
1872 <001C60D8A8C9B730312D06925FC3E316998582E073D2AED498E58DF994
C139E0633A35DDB51C0CE5513E55A383FCD32BD691C4AD1A14513F46BD9C1CC5
57A94AF2E9E53390B7BB475095B52324F63288A8415446317AB1445DDB3F2AD3
C4F252D232AC22BB24F30A42A20CD28D93C86311707FA6850C9C87441E5FB601
C2B08BD963D05CBACFD0E6E609> |
4667 <001C60D8A8C9B71C16F33ECE77940D4C90A0063C89C132BEE2315FE926
5F98F94C0E34FD7F7D2CFD15764F56978C4153211C67FC16E2AACA7B72AC6514
6EDBF9108ABB23E4CFEAE0A64A6575840A029C95> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IBAAAA+Cambria-Identity-H /Identity-H 0 [/IBAAAA+Cambria] ct_ComposeFont pop end end
%ADOEndSubsetFont
/WAYZIL+Cambria /IBAAAA+Cambria-Identity-H findfont ct_VMDictPut
WAYZIL+Cambria [0 -15.78 -15.78 0 0 0 ]msf
116.739 76.15 mo
(\0079\022:\007P\022;)
[-15.6047 -6.59912 -6.60712 0 ]ysh
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: IBAAAA+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IBAAAA+Cambria 4 GetGlyphDirectory
2885 <001C60D8A8C9B62E09DE53EA44723E03C4AAD258944C9324F3C551CD4A
5B8A7DDA5F3916E60CF9DFC3E5E724E5F5D9229F78019169B01C85182B46EA18
F68A28CE606CDABF07722B68E1EA4C183C4054025292FABE84DF65BCADFF1364
07DDE3B4CF1CE55F2B16E5C2F814E4EB1BFC215E170819C8A78DB5ED671F6D5D
6261F490745C93D766C0C386B8808FD9BA5B6670017AE8310B6125D77D1BEE20
F50224192EDEA8CA3EF4991B4576AB02690563CCB6CFD9B19CAE4D> |
2893 <001C60D8A8C9B72F60D2889CC4614FBE6DFCE3FBD3882F146A6BDCA4B6
9C91FCCD3789D17B36B230FCC537DF25C0680045BA31C22EC26ECC89DE675E68
94EDFA75865D7E39BE1145F9F9255E53F7FED3860554618858281937D2741838
36CA6C797F77895325D59129FBBE16F4198316E570597DF17999F0D9A7B52E4A
99E07B14CD97B1B8879104E9DEA9D37B1F3698E0> |
2897 <001C60D8A8C9B5859C148DD5F0123A60D55B64BDBB75A8324652F90673
5C53A7F0A1AE5726B398AB234FE5AF96CA977FE0047327837B6CDD2D00B59452
9C1FF73C79B40056C4AAFAA0095138A1460A494EAC4FA34B8C814A87403C0C16
3388AC4126AD7E8038167BB11A7491F26FFD20EC49E33E5C3989C8F24118C614
F802B58CCA689D30E84E24F62BCEF4ACECD18582F8D9A35B47E35456A73F3B53
DF3E01D68FC05D995D47368F1B9A989F28448605FC581B39FED5C6629457478C
0D135799EAA59148E81530DE34BBE27AE39602D9BDBA83422F9ED79DEC2B529C
E58EC52C9A1EC0DF6B18C1B64E3B71C319857C308979B4E547117713DCFE546E
5EDA2DF5C9FA916D6C029E717DC3795E960EAD7799427BBE821817FC3AF94D5A
ABCDEA6F006694E547C2F64EA850A49E59362CEEFA7956DFC7E091BA2DFC8A83
8798EFAD37463427D74F10BC94C70DE526CC1DAB9FA89989FA167115EFD70069
EC> |
2888 <001C60D8A8C9B6127D3A1964BA7988DB58EC2F9C8489962A1A5D3DE71E
E987B493D7CE9437EF6ACC264BB5DC099F956961B2AEBE2289904F977F055D7C
5E7F9FA2737FE4BD618BFF33CDB89FD2F50748741525FE11967BBDEFA71A298F
1E1FE0A18AF3E6893C3102F5E93C419CBDBB88F6E1C72F308442DB15451C7CC5
EB071B2C21F667165B5A69413D43204C80035627C891CEC3C5712B0390204D9D
7E8B4069131BA3F14B2FF1964A94CD5C16A2C5EDBB991D2A58BC7BA246318FA1
37C6D0BC1CB492BC546B5569A0A1B274953A0D188013BF6B2054F7AE369668DA
68E80B5107F1601AF35A05AD1D9FFAC0E430B834C25103B038BAB290A6> |
!
end
end end
%ADOEndSubsetFont
WAYZIL+Cambria [0 -15.78 -15.78 0 0 0 ]msf
54.9403 559.33 mo
(\0079)sh
WAYZIL+Cambria [0 -11.52 -11.52 0 0 0 ]msf
58.1795 546.43 mo
(\013E\013M\013Q\013H)
[-8.04901 -4.18976 -10.2609 0 ]ysh
WAYZIL+Cambria [0 -15.78 -15.78 0 0 0 ]msf
54.9395 514.81 mo
(\022:\007P\022;)
[-6.53922 -6.60709 0 ]ysh
%ADOBeginSubsetFont: NBAAAA+Calibri-Light Initial
ct_T42Dict begin
-0.508 -0.266 1.207 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /NBAAAA+Calibri-Light
Type42DictBegin
[<00010000000c000c000c000c4f532f326ce47491000000cc000000606376
742034ab31640000012c000001c66670676d70f5847d000002f4000006c3
676c7966a566c04b00008df000000bdc68656164fae9c1e2000009b80000
0036686865610d5b149a000009f000000024686d7478f45efc8c00000a14
00003e3c6c6f6361009f04200000485000003e406d617870125f02960000
8690000000206e616d650592d2e5000086b00000043e707265707d8e53f8
00008af0000002fd6764697200000000000000000000000000030429012c
00050008059905330000011e05990533000003d0008602000800020f0302
020204030204a00002ef4000207b00000000000000004d53202000000000
feff0600fe0001c4079e02262000019f0000000003b2050e000000200004
079e056d03b8fe9300000000050efdda0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000047005e007600a30052007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000576000b03b100060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe9300000000
041d00060011000000000000ff09ffee050e0013041d0006000f0000fffa
fff1fe930000feb803420006050e0006000bfdc7fffafff50000ff250309
0006000dff36fffafff302870006000d0000fffafff1079efeaffea70309
0006000b0437019bfdda0053003a0041004c0054005e0055005f006b007e
0041004a00550062007a004a005b006c007500820043004b0056005f0066
006d0076007f009c00a300c000d2004c0055005e006700700077007e0087
0090009700ab00c9005d0064006d0074007b008a00a100bd00680071007a
0083008c009800ab005d0066006d007600ad006600700079008000890091
009a00ab0048005d006c0075004f007100780064008a006a007f0090008c
007700660000404065585554535251504f4e4d4c4b4a4948474645444342
41403f3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d
0b0a090807060504030201002c4523466020b02660b004262348482d2c45
2346236120b02661b004262348482d2c45234660b0206120b04660b00426
2348482d2c4523462361b0206020b02661b02061b004262348482d2c4523
4660b0406120b06660b004262348482d2c4523462361b0406020b02661b0
4061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a
51582320b08d44235920b0ed51582320b04d44235920b0042651582320b0
0d44235921212d2c20204518684420b001602045b04676688a4560442d2c
01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e
01b0282370b10228453ab10200080d2d2c2045b00325456164b050515845
441b2121592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b0
4061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c
8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23
442d2c4b525845441b2121592d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c00b00743b0
06430b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb820
00621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb2
00802f2b59b002602d2c0c6423648bb84000626023212d2c452345602345
6023456023766818b08062202d2cb00426b00426b00425b0042545234520
b003266062636820b0032661658a2344442d2c2045b0005458b040442045
b04061441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b0
2f2370b01423421b2121592d2c4b515820b0032545695358441b2121591b
2121592d2c45b01443b0006063b0016069442d2cb02f45442d2c45232045
8a60442d2c45234560442d2c4b235158b90033ffe0b134201bb333003400
5944442d2cb0164358b00326458a586466b01f601b64b020606620581b21
b04059b001615923586559b02923442310b029e01b2121212121592d2cb0
164358b004254564b020606620581b21b04059b0016123586559b0292344
b00425b00725082058021b0359b0052510b004252046b0042523423cb007
2510b006252046b00425b0016023423c2058011b0059b0052510b00425b0
29e0b0072510b00625b029e0b00425b00725082058021b0359b00425b003
254348b00625b00325b0016043481b2159212121212121212d2cb0164358
b004254564b020606620581b21b04059b0016123581b6559b0292344b005
25b00825082058021b0359b0042510b005252046b0042523423cb00425b0
072508b0072510b006252046b00425b0016023423c2058011b0059b00425
10b00525b029e0b02920456544b0072510b00625b029e0b00525b0082508
2058021b0359b00525b003254348b00425b0072508b00625b00325b00160
43481b2159212121212121212d2c02b00425202046b004252342b0052508
b003254548212121212d2c02b0032520b0042508b0022543482121212d2c
452320451820b00050205823652359236820b040505821b0405923586559
8a60442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60
441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c00456823
b140408a704560682345686165b200010115132338b1010011362d000001
00000002199a9eeeb78f5f0f3cf50019080000000000c9dc9d7000000000
cc4ac061fbe9fdda09ab079e000000090002000100000000000100000600
fe0001c40aa0fbe9fc6a09ab000100000000000000000000000000000f8f
040e002e000000000000000001cf00000482002804820028048200280482
002804820028048200280482002804820028048200280482002804820028
060effc8060effc8044800bd0448006b0448006b0448006b0448006b0448
006b0448006b04db00bd04db009404ee002104ee002103e900bd03e90048
03e900bd03e9004a03e9004c03e9006f03e9006403e9008703e900bd03e9
00bd03ae00bd050500650505006505050065050500650505006504f400bd
04f400b0053e002901f400bd01f4ff4201f4002901f4ff3301f4ff2401f4
ff5101f4ff4801f4ff7801f4001c01f4002c047400bd028000090280ffa6
040900bd040900bd035a00bd035a0089035a00bd035a00bd036d0020044d
00bd06c200bd051b00bd051b00bd051b00bd051b00b6051b00bd04f800bd
053c006e053c006e053c006e053c006e053c006e053c006e053c006e053c
006e053c006e053c006e053c006e06e7006e041000bd041000bd0554006e
044200bd044200bd04420046044200bd039f004c039f004c039f000f039f
0012039f004c039f004c03de001103de001103de001103de0011051600ba
051600ba051600ba051600ba051600b2051600ba051600ba051600ba0516
00ba051600ba051600ba046f0028070c0047070c0047070c0047070c0047
070c00470403003803c1002603c1002603c1002603c1001703c1002603b5
003f03b5003f03b5001803b5003f03c6001303c6001303c6001303c60013
03c6001103c6001303c6001303c6001303c6001303c6001303c600130540
ffe20540ffe203e700b003cb007703cb007703cb007703cb007703cb0077
03cb0077044d00b0044d005d045e0038045e0038037800b0037800360378
00b00378002103780021037800340378002503780043037800b0037800b0
034c00b00474007704740077047400770474007704740077046400b00464
00850489004601d900b001d9ff5301d9001601d9ff4201d9ff1901d9ff56
01d9ff4801d9ff6b01d9000d01d9001a03ed00b0022700000227ff8103a8
00b003a800b002d100b002d1008902d100b002d100b002e0003603b200b0
05e200b0047400b0047400b00474008904740064047400b0044b00b00490
006f0490006f0490006f0490006f0490006f0490006f0490006f0490006f
0490006f04a3006f04a3006f05f0006f03a600b003a600b00499006f03cf
00b003cf00b003cf003903cf00b0033d004c033d004c033dffee033dffed
033d004c033d004c0347001c0347fff80347001c0347001c047c00ae047c
009a047c00ae047c0091047c0068047c00a7047c009c047c00ae047c00ae
047c00ae047c00ae03de00250614003e0614003e0614003e0614003e0614
003e03ae003f035a0013035a0011035a0013035a0007035a001303550048
03550048035500000355004803c4006803c4006803c4006803c4005703c4
006803c4006003c4005203c4006203c4006803c4006803c40068062d0068
062d0068042800a703670064036700640367005903670064036700640367
00640767006406c5006405fa006405fa00640428006b046d006b0457006b
0428006c03f4006803f4006803f4006803f4006803f4006803f4006803f4
006803f4006803f4006803f400680264002b0684002b08b8002b0497002b
0685002b08b8002b0421002b0421002b0421002b0421002b0433002b0433
002b0433002b0433002b0421002b0421002b0654002b0654002b0654002b
0654002b0667002b0667002b0667002b0667002b0654002b0654002b0421
002b0421002b0654002b05e3002b0817002b0421002b0421002b044a002b
0421002b0654002b04d6002b04d6002b04f8002b070a002b03c0004303c0
004303c0004303c0004303c000430428006b0428006b0428006b0428006b
0428006b042800a70428ffb50433fffa01c4009401c4fffc01c4009d01c4
ff5501c4ffa501c4ff7001c4ff4d01c4ff6001c4001601c400a7039b0094
040e009601d7ffd201d7ffd201d7ff5e038700a7038700a7038700a701c4
00a701c4002501ed00a701c4005101e9002002c600a7065400a7042800a7
042800a7042800a7042800a7042800a70472ffa1042800a7042c0064042c
0064042c0064042c0064042c0064042c0064042c0064042c0064042c0064
042c0064042c006406d40064042800a7042800a70428006b02c200a702c2
00a702c2009002c2007a03180055031800550318fffd0318005503180055
031800550599005505990055041900a701e000a702a1002702b0002702a1
002702ae002c04cf00270455002704550027045500270455002704550027
045500270455002704550027045500270455002704fa00270728002706ad
002706ad002706ad002706ad002706ad002706ad002706ad002706ad0027
06ad002706ad0027042800a3042800a3042800a304280084042800a30428
008f0428007e04280091042800a3042800a3042800a3038500290597003f
0597003f0597003f0597003f0597003f0359002e03870029038700290387
002903870029038700290326006403260064032600640326006403280075
0353006c0360006302a1004c02dc00750253004a02dc005002b0004e01b9
00290294003402e000750156006a0160ffd70280007501510075044a0075
02dc007502de004c02dc007502dc005001f10075022a004601d7002702e0
00750273002303d700320266002c027500240235004a024a0093026d0000
028e00000000fda00000fceb024c0094026d0000028e00000000fda10000
fceb0321000003590000039000000000fca30000fc690321009303590000
039000000000fd340000fc6b0200000003a1009103aa000003b200000000
fcf30000fc5b030b000002e6000003300000035500000000fcac0000fc87
032c0000034a0000036700000000fc9b0000fc7e03070000030700000307
00000000fcae0000fcae0289009402920000029b00000000fd810000fce4
02cf000002c2000002b5000003ae000003c4000003da008e0000fc5b0000
fcd201c4009401c4000001c4000001c400000000fde70000fd53027a0094
0000fd88027c00940000fd8801f100930234009104820028048200280448
00bd035a00bd0475004203e900bd03e9ff4603b5003f04f400bd04f4ff46
053c006e01f400bd01f4ff4601f4ff53040900bd047d002a06c200bd051b
00bd03ef0057053c006e053cff6404f400bd041000bd039f004303de0011
03c1002603e9ff4603c1002605e400000403003805c0009e053d006a053d
ff6403c6001303c6001303e700b002ef00b003a30025037800b0037800b0
03550048046400b0046400b00490006f01d900b001d900b001d9ff5503a8
00b003bf001205e200b0047400b0038100620490006f0490006f046400b0
03a600b0034a004a0347001c035a0013035a0013035a00130519000003ae
003f051200940497006f0497006f046f006c046f006c043000a70421006e
037a001e0426000003a3006203a3006202b50056044400a7044400a70432
0069046b0007022500a3022500a30225ff780225ffba038700a703990000
045700a7037e002902f8005502f40052042c0064042c0064044f002c03fa
008004330064034d006603130004044d009f044d009f044d0082044d009f
0500005f0508005f034d0016058700a5057a006f057a006f01f800930000
fded03e300a70000fcdd01f500a501f500a501f500a5021a005201f5007c
01f5007c04820028043900bd044800bd036d00bd036d00bd037400bd0506
000003e900bd03e9004803e9006c0644006403c00053051700bd051700bd
051700bd01f400bd01f4ff5102800009044200bd044200bd04cf000006df
000006c200bd04f400bd06ed00bd053c006e053c006e04f000bd041000bd
0448006b039f004c03de00110421001304210013049f0028057600000403
0038050b00bd04ec00bd0462008906d200bd06f300bd04d0001105ef00bd
042700bd046c0068046b006c06e200bd045c005d04f2001104e2001104f8
000003c6001303d500b003e700b0030d00b0030d00b0031d00b00463000f
037800b003780036037800340544004e0374005f047300b00473009a0473
009401d900b001d9ff560227000003a600b003a600b00419000005e200b0
046400b00490006f0490006f045100b003a600b003cb0077033d004c0347
001c037e0022037e001b0418002604ac005603ae003f047600b0045400b0
03dc007c05f900b0063700b0043d0016055600b003cd00b003e2007303f1
006f060300b003e4006604480020044a00200431000005dc0000061200b0
03c40068044400000426000003c400a702bb00a702bb00a702c600a702bb
00a7045d0016045d001603f4006803f4006803f40068054d0046035d0055
044000a70440007c044000a701c4009401c4ff7001d7ffd2039400a70394
00a70403001805e500140540006a043b00a7060c00a7042c006404240064
041b00a7041b00a7042800a703670064031800550317000b0317000b0387
00290387001803bd002904c400590359002e043e00a7042600a703aa004c
05ae00a705cf00a70431000b052100a703a600a7039200550394006805a4
00a703b0003f0444fffa0433fffa0419001c035100000351000003510000
0000fcae0000fcae029b011e029b00d3029b00d303b5008f03b5006403b5
006403c6006a025b00fe025b00c3036700820367006d01f50034021a0052
021a00ca01f500a5056f00a501f5009e01f5003401f5009e01f500340346
009c034600340346009c0346003401f500340346003402b0008302b000cb
02b0008302b000cb03fc008403fc00b803fc008403fc00b802e6000102aa
001e039f019803fc01c402e6000102aa00240273004a0273004a03fcfff7
03fcfff7073e009f073e009f073e009f073e009f03fcfffa03fc00d901f5
00a501f500a50264009402640087026000d20260005b026400680264007c
0232009102320086023200c1023200680264009402640087026000d20260
005b026400680264007c03fc00ab03fc008403fc008403fc008704a30079
042c007a03fc009203fc003f01b60094030b0094055c00000544000007cf
000007220000073800000722000006ad00b906ad00b9040e008d05940046
0594004c02b2000003fc005004b10050040e003003fc005f040e00680421
005f03fc00c103fc004e040e005703fc007303fc0037040e004003fe0039
039f0068039f0068039f005b039f003706170052081b00bd03fc002906b1
00b003fc001e0489006802c1002903e9006d03e90059044f002503cd0053
0430008b03ac00380430006f04300068040e0050040e00bd040e0080040e
0071040e0023040e0068040e0077040e006c040e005d040e005b0428006f
027c0018037100620369005f039600270355006203aa007a033d003403a5
005503aa0059039f005d039f0098039f0071039f006a039f0041039f006a
039f0071039f006a039f005f039f005d0489006802c1002903e9006d03e9
00590418002503cd00530430008b03ac00380430006f04300068040e0050
040e00bd040e0080040e0071040e0036040e0068040e0077040e006c040e
005d040e005b031a004e01f1002702ae005202ac004602d10027029f0046
02dc0064028b003402da005302dc004c02f4005d02e7005d02d5005d01b6
006a01b60061031a004e01f1002702ae005202ac004602d10027029f0046
02dc0064028b003402da005302dc004c02f4005d02e7005d02d5005d01b6
006a01b600610290003d01ed003802420043023200320232001602320032
023b003402210025023b0029023b00270290003d01ed0038024200430232
00320232001602320032023b003402210025023b0029023b0027029bff5b
02e0004b0549004b0551004b04ff004b0551004b0516004b0531004b05ae
005605ae00560549004e059b004e057b004e05ae002905600045057b0045
0503003805a8005008330050057d006807b5006803fc005003fc005703fc
006603fc003003fc006403fc006603fc005d03fc004503fc006403fc0050
03fc005503fc005603fc004505e9002c03e9003f06e30071043e006c02e2
000403fc000d04750042053d006a045700a706780071044a005f03fc0055
073e009e073e009e073e00d3073e00d3073e00ce073e0155073e00cf073e
01550a36009e064200b104660028028900ee028900980355005e0355003b
0355005e0355003b0355005e0355003b0355005e0355003b0355009e0355
0087035500720355006d0355009e035500870355007e0355006a01c40094
048200280482002804820028048200280482002804820028048200280482
00280482002804820028048200280482002803e900bd03e900bd03e9003f
03e900bd03e900bd03e900bd03e900bd03e9004a01f4003e01f400ac053c
006e053c006e053c006e053c006e053c006e053c006e053c006e055a006e
055a006e055a006e055a006e055a006e055a006e051600ba051600ba059c
00ba059c00ba059c00ba059c00ba059c00b3059c00ba03c1002603c1000f
03c1002603c4006803c4006803c4006803c4006803c4006803c4006803c4
005703c4006803c4006803c4006803c4006803c4006203f4006803f40068
03f4006803f4006803f4006803f4006803f4006803f4006801c4002f01c4
0094042c0064042c0064042c0064042c0064042c0064042c0064042c0064
044c0064044c0064044c0064044c0064044c0064044c0064042800a30428
00a304a100a304a100a304a100a304a100a304a100a304a100a303870029
038700290387002903eb00530466003803c6001303c6001303c6001303c6
001303c6001303c6001303c6001303c6001303c6001303c6001303c60013
03c60013037800b0037800b00378fff7037800a2037800a2037800a20378
00a20378002101d9004101d9009e0490006f0490006f0490006f0490006f
0490006f0490006f0490006f04ae006f04ae006f04ae006f04ae006f04ae
006f04ae006f047c00ae047c00ae050d00ae050d00ae050d009a050d00ae
050d0068050d00ae035a0013035affd9035a0013028900ee038100940381
00940381009403cb0094036a00be036a00a3036a00be03cb00a104c10061
051c00bd052100bd051c00bd047a00b0047a00b0047a00b003de001102a1
00270347001c01d6000b0421002b0421002b0421002b0654002b0654002b
0654002b0325002402f7008202e900510356008202ad008202870082036b
004d036000820172008201cb001702d700820253008204950082037e0082
0394005202d3008203a3005202f500820287004002ac001c037900800316
002404c3003a02d6002d02ac0022029200380000fdfb0000fdfb04660201
046602010466018a0466018a0389009403d8008e03070094030700940307
009403070094023400910234009101f4009101f4009101f400a901f400ad
0000fd860000fda902ac009402ac00940273009b0273009b02db00d202c6
009402c6009402f0009402f000940235004f0235009b030b009302890094
0466020102aa001702b000140328009603280093030b0096030b009603a1
008f032c000004cc000004cc000003a3007503b200800000ff110000fee9
0000fdc80000fdc80000fe8c0000fe8c0000fe3e0000fe3e02db011c02aa
00170289008702b1001402aa009b02aa009b0391014f0391014f0000fd9c
0000fd9c0000fd270000fceb0000fde50000fdc002aa001702aa001702a0
00190466018a0273009b03a3009103a3009103b2009103b2009103a30091
03b2009104230014040101580000000002fc010402fc010402c700d202c7
00d2030700940307009402aa009b035601220356012204d5012202b300e6
02b300e601c4009401c4000002aa00990398009402aa00a902aa00a90776
004b0776004b0776004b0798004b0797004b0797004b070b0049070b0049
0776004b0776004b07c1004b01d7003f01d7003f01e9004001e9004000ec
005200ec00520205003e0205003e020300590203005901a2003e01a2003e
02030041020300410203005b0203005b0305005b0305005b015c005b015c
005b015000240150002401bd002501bd002501ac002401ac002402ed0075
02ed007502ed007502ed00750000fdd303bd009303e9008203e9008203ea
007d03ea007d03e9008203e9008203ea007d03e9007d03cd007d03cd007d
03cd007e03cd007e015f005b02fc00e602fc00e60557012204b6000f0439
00bd044d00430448003c0455007104ee00210553000f0439005e03e90077
04f0007803bd006603aeffd6050a006504550016024800ba024c00270409
00bd06d800b9051bffd6053c006e0604006f0480000f041d00bd03b30053
039f004303fb000f03de00110542006f0460002303e0002103d7005703e9
003e03e9005a03cf0034088400bd080900bd05b300bd053100bd079b00bd
06f200bd0482002801f4ff37053c006e051600ba051600ba051600ba0516
00ba051600ba0482002804820028060effc80524006b0505006504090041
053d006e053d006e03e90028088400bd080900bd05050065075500bd0497
00bd051b00bd048200280482002803e9008b03e900bd01f4ff3b01f4000a
053c006e053c006e0442005d044200bd051600ba051600ba03f3005604f4
00b404dd00bd0450006403b5003f0482002803e900bd053c006e053c006e
053c006e053c006e03c1002604b00028044b006b0358002703de001102fe
00000443002105250019047d002a03e9007b029500090501006e04560021
0437004404820028044800bd044800bd044800bd0448006b04db00bd04db
00bd04db00bd04db00bd04db00bd03e900bd03e900bd03e900bd03e900bd
03e9008703ae00bd0505006504f400bd04f400bd04f400bd04f4003004f4
00bd01f4ffb901f4ffd3040900bd040900bd040900bd035a00bd035a002b
035a00bd035a00bd06c200bd06c200bd06c200bd051b00bd051b00bd051b
00bd051b00bd053c006e053c006e053c006e053c006e041000bd041000bd
044200bd044200bd04420063044200bd039f004c039f004c039f004c039f
004c039f004c03de001103de001103de001103de0011051600ba051600ba
051600ba051600ba051600ba046f0028046f0028070c0047070c00470403
00380403003803c1002603b5002c03b5003f03b5003f036e003503a2000c
041c0030044200bd051500bd042400bd03bf003f0448003c03ae00620330
00bd044b0012042800a7042d002d037100640427006b03f000580264ffe9
064900a703ef00a7038700a7021b000a0398001b044400a7052200640428
00a7033d005302a1002702a1002703ac002303340072037b0050034f003d
03380048074e006b039b00a705ff00a703c4006801c4ffe4042c00640428
00a3042800a3042800a3042800a3042800a303f4006b03c4006803c40068
062d006803bffff303c000430387ff1d042c0064042c0064037b003c01d7
ffd2074e006b03c00043042800a703c4004203c4006803f4004803f40068
01c4ff2a01c4fff3042c0064042c006402c2ffe402c2009d0428007a0428
00a303a0004d0428ff2304ff006c042400620326006403c4006803f40068
042c0064042c0064042c0064042c006403870029029800a3050200a702c1
00270628006c0628006c03930064032c005502fa006402f6001903fe0068
02490001024900010428006c02d6fff303b700190308002803fb006e0326
003d01e900bd035b00bd044500bd029b011e03c40068042800a7042800a7
042800a7036700640428006b0428006b0428006b0428006b0428006b03f4
006803f4006803f4006803f4006803f400680264002b03c0003604280000
042800a70428006904280019042800a701c4ffa101c4ffa101c4ffea0387
fffd038700a7038700a701c4009401c4ff3301c4ffe001c4ffe1065400a7
065400a7065400a7042800a7042800a7042800a7042800a7042c0064042c
0064042c0064042c0064042800a7042800a702c200a702c2009402c2fffe
02c2005f031800550318005503180055031800550318005502a1002702a1
002702a1002702a10027042800a3042800a3042800a3042800a3042800a3
03850029038500290597003f0597003f0359002e03590029038700290326
000d0326006403260064042800a702a1ffae0597003f0387002903c40068
01e000a40283004803c4006802b5fff2043f00a7039600a7032600640383
0000036c004802e5003a02d500a704b90064044b001703d500b003cc0046
03cb004c03f00077045e003804c0001a03d2005b037b007a0454006f0375
00570343fffa047b007703c10018021800b001fc001e03a800b0060c00b0
0474fff00490006f0557006f03fd000d03bb00b0034e005b034a004a0354
000f0347001c04a6006c03d40025034b000f035500480389005a038a0057
0357003f07a200b0083800bd051a00b005d100bd069b00b0074200bd03c6
001301d9ff420490006f047c0091047c00ae047c00ae047c00ae047c00ae
03c6001303c600130540ffe204c900770474007703a8005c0490006f0490
006f0389001a07a200b0083800bd04740077065d00b0040d00b0047400b0
03c6001303c6001303780039037800b001d9ff4501d9fffe0490006f0490
006f03cf002f03cf00b0047c0087047c00ae037a005f04640086045600b0
03c1005a0362004803c60013037800b00490006f0490006f0490006f0490
006f035a000903ee00270406008d02e8003e037600300339005d03e40039
0467001403bf001203a0007f024500070472006f03d0003203a000360390
00590343006701cf00b0034100b0042b00b0025b00fe03c6001303e700b0
03e700b003e700b003cb0077044d00b0044d00b0044d00b0044d00b0044d
00b0037800b0037800b0037800b00378009803780043034c00b004740077
046400b0046400b00464009b04640023046400b001d9ffab01d9fff303a8
00b003a800b003a800b002d100b002d1ffed02d100b002d100b005e200b0
05e200b005e200b0047400b0047400b0047400b0047400b00490006f0490
006f0490006f0490006f03a600b003a600b003cf00b003cf00b003cf002a
03cf00b0033d004c033d004c033d004c033d0000033d004c0347001c0347
001c0347001c0347001c047c00ae047c00ae047c00ae047c00ae047c00ae
03de001a03de00250614003e0614003e03ae003f03ae003f035a00130355
ffff0355004803550048046400b0034700100614003e035a001303c60013
02e800460323000c03bc004603cf00b004a300b003b200b00369004803cb
004c0328005803b200b00421002b0433002b0433002b0433002b0421002b
0421002b0433002b0435002b0434002b0654002b0666002b0666002b0667
002b0654002b0654002b0667002b066a002b066a002b0455002704550027
0455002704550027045500270455002704550027048200270482002706ad
002706ad002706ad002706ad002706ad002706ad002706ad002706db0027
06db002703c400a30428006c042800a7042800a7036c0048036700640428
006c0428006c03f4006b03f4006b04c8006b03a3006203a30073045f0073
04110064021fffed0428006c0428006b03f8006403770020038500190428
00a3042800a7042800a7021f000c021f000c022500a30256003002cb000a
0226003201c500a7045e00a7065400a3065400a3065400a70428ffca042c
00a7045e00a70424006405650064056f006a0500005f02c2002502c20025
02c2002502c200a702c200a7028800a30288002503b000a703d700a70318
005501c4ffca0227fffa01c3ffc901ceff8602a10046027100270473002a
04320060036d002903850029056f003f03870024033c002003320064034f
0064037b003c038a004a02fe000002fe003c032d001b0385008205480075
03c400a70411006e04140064043b00a701ecffa40387003802bd00a70432
006c031200140312003c0664006c06c1006c066f006c0546002704580027
059900270684002b04ae00a704e800a704ab0067042f00a7042900000428
0000039b0025051affe7062d006b03d80039037b0064042000a704340039
034000a703a3007301c5009502250007038100a702c700280540006a0440
00a704360064037b004804730050046b004c052c001d06d4006b03b70064
03fc004c03fc004c038b00a703a8004c03a8004c0317000b041b00a00490
006405e2006404900064038500290597003f033a00640373006c03350042
0399002302bb00a703850029041b00a7038b00a704930079040300180325
0024041bfff002f7008202f7001e0356008202ad008202ad0057036b004d
036000820172008201cb001702d700820253008204950082037e00820379
00820394005202f8004b02d3008202f5008202ac001c0379008004c3003a
02a1004c02a10075031600510428005102dc007502dc005002b0004e02b9
00520281004c02810054029400340155006902800075044a007502de0075
02de004c0257003e02c9004002c9004002dc007501d7002702e000750314
004d044a0072027300230288002802e600750275002202dc004e03890049
0282002f0156006a01f1007502e000750273002302e600750275002202c8
005f03890049025a002f068f00a30433ffbb0433006b030c00390690000e
0469000f0449ffa70347000a0311000a0358006c030d000a035f005803c0
004302eb00750378002306ca0027021f000c02a0000c04ae002304750030
04e60032042800a7043e006c0264002b04490043039600a701da0087066a
00a7043d00a7042800a702c2008703180055028effca03850029037d0027
032600640436006804ac006c0428006c03f4006803a3006203a3007304c8
006b02330094036c004d01ecfff2049600a3034f004102da00750253004a
0262004c02ca00510277004a01b9002901a7001c02dc005002e300750194
00190190005201b9002f0194001901b9000a018800750173006b01f20075
044a0075044a007202deffec02e30075030d007602db004b03610046022c
00470179000801e10027031c002d02e6004902d40070026e0028027d0028
0235004a0265004a026c004a026b003402e7005002e0007502de00750160
ffd701f1007501f30028020f002802b2007503d700320275002401bf0053
02e8005301fb007b01d9002b01fb007b02b300e602c700d2027000320270
0064037300460374005f037b0043037a004201f400c9024c0094024a0093
01f400c9032c0094024a0093024c009402f200d702f200d702b300f502db
00d202b8009702b8009702b8009702b800970271004b02ba005002770024
01510075022a00460266002c0209002503da00ae03da00ae03da00ae03da
00ae03da00ae058000ae058000ae058000ae058000ae03da009805800098
0580009805800096058000960580009603da009b0580009b0580009b0580
009b0580009b0580009b03da00a0058000a0058000a0058000a0058000a0
058000a003da00a3058000a3058000a3058000a3058000a3058000a303da
00970580009805800098058000980580009805800098058000ae058000ae
058000ae058000ae03da0098058000980580009805800098058000960580
009603da009b0580009b0580009b0580009b0580009b0580009b03da00a0
058000a0058000a0058000a0058000a0058000a003da009b0580009b0580
009b0580009b0580009b0580009b03da0098058000960580009805800098
0580009805800098058000ae058000ae058000ae058000ae03da00980580
00980580009805800098058000960580009603da009b0580009b0580009b
0580009b0580009b0580009b03da00a0058000a0058000a0058000a00580
00a0058000a003da009b0580009b0580009b0580009b0580009b0580009b
03da00980580009605800096058000980580009805800098058000ae0580
00ae058000ae058000ae03da009705800098058000980580009805800098
0580009803da00a3058000a3058000a3058000a3058000a3058000a303da
00a0058000a0058000a0058000a0058000a0058000a003da009b0580009b
0580009b0580009b0580009b0580009b03da009805800096058000960580
00960580009805800098058000ae058000ae058000ae058000ae046600dc
046600dc037a010304f601110346003404000119040001170400017c0400
0175033700cd024a00d0038900d903ae002803a10063021a00e9035c00dc
035c00c5035c00dc035c00c5031b0058031b005803b40049032700ca0327
00ac0324008e031b0052071200c3071200c302a1004c02b0004e02de004c
0266002c02b0005201dc009101dc009101dc009401dc009401f8009301f4
009201f8009001f400910000fcae0000fc140000fcf8032900910000fcf8
030b0091031e0094032400940000fcf7032900940000fd0a02e900940000
fcf2032400940000fcad03e300a70000fca603e30094030b006f03550094
032c00000307000001f4009101f40091030a0000030b0000030d000002e9
0000046600b1046600b1046600b1046600b103e3005503e3003f03e3006d
03e3004f02510097025100970548006e0448006b0448003c044b006b044b
003f040b001b045bff46040b001b03ae00bd05280076033d0023068600bd
048d002f0395005e041000bd0421006e0394006803920055046b00070452
004205d4002c04020080040effe403670064036c00480367006403670048
0500005f034e00a7042c006403a10069052300a7049d0031034d006601d7
ffd2042800a7048600420490006f03cb007703cb004c03cb007703cb004c
0381001a0381001a0381001a034c00b0046a006f02f5003c059100b00414
00320367005603a600b0048200280482ff6604daff450482ff9a04820022
0482ff6604c8ff5704baff9a048200280482000604820028048200280693
0028069300280693ff6606ebff450693ff9a069300220693ff6606d9ff57
06cbff9a04820028048200280482ff6604daff450482ff9a04b000220482
ff6604c8ff5704baff9a03e9ff460500ff460509ff4603e9ff570511ff57
04f5ff5703e9ff4603e9ff3e04f4ff46060bff460614ff460532ff0504f4
ff57061cff570600ff570562ff0504f4ff4604f4ff3e070f00bd0719ff46
0826ff46082fff46074dff05070fff570837ff57081bff57077dff0504f4
00bd04f4ff46060bff460614ff460532ff0504f4ff57061cff570600ff57
0562ff0501f4ff46030bff460314ff460232ff0501f4ff57031cff570300
ff570262ff0501f4ff4601f4ff3e01f4ff4801f4ff78053cff5a0629ff46
065cff46053cff570639ff570648ff57053cff64053cff3e0410ff57040a
ff570511ff570519ff570478ff0503e9ff460411ff3e03c1002603c10026
053dff5a062aff46065dff460566ff05053dff57063aff570649ff5705ab
ff05053dff64053dff3e0758006a0758ff5b0845ff460878ff460781ff05
0758ff570855ff570864ff5707c6ff05053d006a053dff5a062aff46065d
ff460566ff05053dff57063aff570649ff5705abff05046f006c046f006c
046f006c046f006c046f006c046f006c046f006c046f006c046f006c046f
006c046f006c046f006a046f006c046f006c046f006c046f006c046f006c
046f006c046f006c046f006c046f006c046f006c046f006c046f006c046f
006c03a3006203a3006203a3006203a3006203a3006203a3006203a30062
03a30062044400a7044400a7044400a7044400a7044400a7044400a70444
00a7044400a7044400a7044400a7044400a7044400a7044400a7044400a7
044400a7044400a7044400a7044400a7044400a7044400a7044400a70444
00a7044400a7022500850225001c022500090225000a022500920225001e
022500160225fffc0225ffba0225ff9e0225ffdb022500a3022500430225
ffbd0225ff5a0225ff69042c0064042c0064042c0064042c0064042c0064
042c0064042c0064042c006403fa008003fa0080044d009f044d009f044d
009f044d009f044d009f044d009f044d009f044d009f044d009f044d009f
044d009f044d009f044d009f044d009f044d006e044d0084057a006f057a
006f057a006f057a006f057a006f057a006f057a006f057a006f057a006f
057a006f057a006f057a006f057a006f057a006f057a006f057a006f057a
006f057a006f057a006f057a006f057a006f057a006f057a006f03c60013
03c6001303c6001303c6001303c6001303c6001303c6001303c6001303c6
001303c6001303c6001103c6001303c60013058b0013058b0013058b0013
058b0013058b0013058b0013058b0013058b0013058b001303c6001303c6
001303c6001303c6001303c6001303c6001303c6001303c6001303c60013
037800b0037800b0037800b0037800b0037800b0037800b0037800b00378
00b0046400b0046400b0046400b0046400b0046400b0046400b0046400b0
046400b0046400b0046400b00464005d062900b0062900b0062900b00629
00b0062900b0062900b0062900b0062900b0062900b0046400b0046400b0
046400b0046400b0046400b0046400b0046400b0046400b0046400b001d9
007601d9001201d9ffe501d9fff301d9009c01d9000501d9fffb01d9ffe4
01d9ffa201d9ffa201d9ffec01d900b001d9005d01d9ff1901d9ff4801d9
ff6b0490006f0490006f0490006f0490006f0490006f0490006f0490006f
0490006f03a600b003a600b0035a00130389001a035a00130389001a035a
00130389001a035a00130389001a035a00130389001a035a00130389001a
035a00130389001a035a00130389001a035a00130381001a035a00130389
001a035affd90389ffed035a000c0389001a035a00130389001a0497006f
0497006f0497006f0497006f0497006f0497006f0497006f0497006f0497
006f0497006f0497006f065c006f065c006f065c006f065c006f065c006f
065c006f065c006f065c006f065c006f0497006f0497006f0497006f0497
006f0497006f0497006f0497006f0497006f0497006f0647002806470028
0647ff66069fff450647ff9a064700220647ff660647ff57067fff9a06b9
00bd06b9ff4607d0ff4607d9ff4606f7ff0506b9ff5707e1ff5707c5ff57
0727ff050702006a0702ff5a07efff460822ff46072bff050702ff5707ff
ff57080eff570770ff0504820028048200280482ff6604daff450482ff9a
048200220482ff6604c8ff5704baff9a04f400bd04f4ff46060bff460614
ff460532ff0504f4ff57061cff570600ff570562ff05053d006a053dff5a
062aff46065dff460566ff05053dff57063aff570649ff5705abff0501dc
009101dc009401f8009301f8009003a10091030a0091030b0091031e0094
030d009402e90094031e009403e300a703e30094030b006f01dc0091032c
00000307000002510097022600a3022d00a3022a00a3053800bd04f80000
041000bd037c0021042c00bd0686006403c00053048a00bd046a00bd046d
002104f40011051500bd05a600bd070500bd0558006e0448006b03de0011
03c1002603c10021045d0032059e001104830089047c0089043e00bd0583
000a0583000a01f400bd06440064044200bd04f0000004f400bd051500bd
0462008906e300bd0482002804820028060effc803e9005804f0007804f0
00780644006403c0001703e9003e051700bd051700bd053c006e053c006e
053c006e046c004a04210013042100130421001304620071037400bd05ef
00bd037c0021045d0032042b00460410006a052b003c04d1002a04120075
060e0000063d00bd050500650432001103bd006604cf0000046100a70419
001c042800a702fc0035038c00a705920046035d005503d700a703a900a7
039ffffa0428000b045c00a704cf00a705dd00a704360064036700640316
000b0387002303870023038d002704c3000b03cb004c03be004c042800a7
04bd001204bd0012054d0046039500a704240018043b00a7045c00a703aa
004c0584006a01f400bd03c4003703c40060062d006803f4005703f4006b
03f4006b054d0046035d001d037b003c0440008a0440009b042c00640424
0064042400640392002903870029038700290387002903aa002402bb00a7
052100a702fc0035038d0027036d00310428006b0582006b048d00200392
005d05540018059600a703f8006403c9000b03a300620403001804b100b0
0431000003a600b00357003403cc00b0057f004e0374005f03db00b003d1
00b003d000380429001604a300b004ed00b0063f00b004b8006f03cb0077
0346001c035a0013035c000e03d1003a050d0016041b007c03fa007c03cc
00b0051e000e051e000e01d900b00544004e03ae00b004560000046400b0
04a300b003dc007c062100b003c6001303c600130540ffe2037800190454
006f0454006f0544004e037400080389005a04730095047300a20490006f
0490006f0490006f03e20028037e0022037e0022037e002203dc003c030d
00b0055600b00357003403d1003a03c2004403a6006604b30053048a0010
03cd007e0561000005c200b00474007703ee001c03750057041900000400
000008000000040000000800000002af0000020000000155000004500000
01bc000000a7000001000000000000000000ffdc0000ff2a040e0002040e
000203e800d703fcfffa01f5009e0348009e01bf005302e8005304100053
048f011e03fcfffa0273004a046b004b04b7006b0498006b03c10030040c
0057065400a705b10050089a00bd06cf00bd0784005705cc00bd0423002a
03de00110823004a05700039048f0035057c006504e1003004930046047b
006b0617005205b2001505d700b705a800ce03fc00640800007f03fc0068
02e2011c02e200040400ffd7040001c4040001c40400ffd7040001c40400
ffd806d800b90443006a048700d303ae00580451003a04a8007603d60013
065400a30414006b03dd00220374007a0421004a03da0062037300260375
009403a9006603a9006601dc009401dc009401dc009101dc009102aa006b
02aa006b046600480aa000f5088100ae08a4007e0694006e064c00bd0496
0023067000bd05c40026075a00bd03c2004005c0009e049f002808c3006e
053c006e0694006e0694006e043a006b057a006f052a00a70408000d057f
00a7051d0030068000a7035d004a058700a503bd002907b30064042c0064
057a006f057a006f034500640639006e057f00b00405000e059d00b00504
0030066900b00394004a051200940418002607b9006f0490006f0639006e
0639006e03aa0077064200cf00000000049800bd0000ffdc0000fe5f01cf
0000022400d601c700000156006a029bff5b0aa0011204d5009203580102
035800c504d500b2035800b00aa001120aa001120aa001120aa001120aa0
01120aa001120aa001120aa001120aa001120000fc90000000000000fcc3
000000000000000003a100ac03b2009e032c00b4032c00b4032c008b03a1
00ac031e009403550094028e007203550069030b006a03bd009102aa006b
055001de01d200b6032c008b039e0094024c0056028c004a0000ffa20000
ffa202c6005003550094030b006f03550094031d009403b6007603120091
0355008e030b008e03670094031e008203d8000003890094030700940307
009403a100ac03b2009e032d009402aa004c03c4008e03070094030b0094
035c0090039a00ac032c00a20348009e036a009403a200ac028e0028035f
0090000000ad0000006700000000000000ad00000096000000a0000000ae
000000ae0582ff57056dff5704d3ff05045bff460465ff3e040b001b040b
001b058b0013058b0013058b001103c6001303c6001303c60011062900b0
062900b00629005d046400b0046400b00464005d035a0013035a0013035a
0013065c006f065c006f065c006f0497006f0497006f0497006f0000fdcc
0000fdac0000fe660000fde80000fc5d0000fc360000fc5f0000fc360000
fc5f0000fc360000fc5f0000fc360000fc9f0000fc880000fc730000fc6e
0000fc9f0000fc880000fc7f0000fc6b0000fd9e0000fc300000fc300000
fe020000fe020000fd830000fd830000fca80000fc910000fd420000fd42
0000fd410000fd420000fdad0000fdad0000fdcb0000fdcb0000fdda0000
fdda0000fd730000fd730000fd770000fd770000fd590000fd720000fd72
0000fd720000fd720000fcd80000fdb50000fcfb0000fd3b0000fd800000
fcf30000fcf40000fd340000fcea0000fd430000fd430000fcab0000fcea
0000fc310000fbe90000fc560000fce50000fd980000fcf50000fd720000
fcf30000fd7a0000fd7a0000fdb50000fdb50000fcf50000fcf50000fbe9
0000fce90000fd7b0000fcf80000fcf80000fca40000fca50000fcab0000
fcab0000fc470000fd8b0000fde40000fde40000fd910000fd910000fd3d
0000fd370000fd7a0000fe010000fe010000fd3e0000fd9e0000fd9e0000
fde00000fde00000fd780000fcf00000fd890000fd890000fc920000fc92
0000fc920000fc810000fc7f0000fc810000fcc30000fcc30000fc900000
fc900000fc6b0000fd920000fd920000fd7f0000fd7f0000fe090000fe09
0000fd6e0000fd6e0000fd870000fd870000fd9e0000fd9e0000fd7e0000
fd7d0000fd8a0000fd890000fd0b0000fd0b0000fdc60000fdc60000fdb5
0000fdb50000fd780000fd780000fd7a0000fd7a0000fd160000fd160000
fd160000fd160000fce90000fcbb0000fcbb0000fcc50000fcc60000fcbc
0000fcbc0000fcc80000fcc70000fcc60000fcc60000fcc80000fcc80000
fdc60000fdc70000fdc70000fd3e0000fdfc0000fdfc0000fe690000fe69
0000fde20000fde20000fe0e0000fe0e0000fcf70000fcf70000fcf80000
fcf80000fcf80000fcf80000fcf20000fcf20000fcf70000fcf70000fd0a
0000fd0a0000fcf20000fcf20000fcdf0000fcdf0000fccc0000fccc0000
fcd60000fcd60000fca00000fcae0000fdc90000fdc90000fc9d0000fc9d
0000fc9d0000fc9d0000fcb00000fcb00000fcb00000fcb00000fc8c0000
fc790000fca10000fc8e0000fd9f0000fd9f0000fd340000fd070000fd07
0000fe690000fe690000fdfc0000fdfc0000fd030000fd030465ff570381
001a0381001a0381001a01c400940437006b0428006b0428006b0428006b
0421002b0654002b0aa000f50aa000f50aa000f50aa000f50aa000f50aa0
00f50aa000f50aa000f50aa000f50aa000f50aa000f50aa000f50aa000f5
0aa000f50aa000f50aa000f50aa000f50aa000f50aa000f50aa000f50aa0
00f50aa001120aa001120aa001120aa001120aa001120aa001120aa00112
0aa001120aa001120aa001120aa0011204db00bd041c0030039700760aa0
00f5047600b0032d0094032d0094032d009401f8009301f4009201f80090
01dc0091030b0091030a009101dc009402c60094030d009403e300a703e3
0094031e0094031e009403aa000001f80093022500a301d900b001f400bd
0676002806e800bd0731006a061c003806730038061c0038061c00380517
00bd041300bd046100bd045e00bd043c002104c50011041300bd041300bd
047d002a04ea0025060b002b047d002506d90025042100130590004605c2
004605900046059000460473009803b800b003e500b003b300b003db0038
043b001603b800b003b800b003bf00120432000d056f001203bf000d05ef
000d037e001c04310093033d0053033d0053033d0053033d001e0428006b
0531002e057d002e0531002e0531002e042800a30428007a042800a30387
00a703cd00a7039f00a70392fffa041b000b038700a7038700a703850029
03df002904ed003303850029056c0033061b00a7042800a7065400a707b3
00a7066e00a703870027043e00a3042800a3064d00a3066300a30431000b
052100a7052100a703a600a705a400a7041900270428007a0428008f040e
005800>
<000000000000012a0000012a0000012a0000012a0000012a0000012a0000
012a0000012a0000012a0000012a0000012a0000012a0000012a0000012a
0000012a0000012a0000012a0000012a0000012a0000012a0000012a0000
012a0000012a0000012a0000012a0000012a0000012a0000012a0000012a
0000012a0000012a0000012a0000012a0000012a0000012a0000012a0000
012a0000012a0000012a0000012a0000012a0000012a0000012a0000012a
0000012a0000012a0000012a0000012a0000012a0000012a0000012a0000
012a0000012a0000012a0000012a0000012a0000012a0000012a0000012a
0000012a0000012a0000012a0000012a0000012a0000012a0000012a0000
012a0000012a0000012a0000012a0000012a0000012a0000012a0000012a
0000012a0000012a0000012a0000012a0000012a0000012a0000012a0000
012a0000012a0000012a0000012a0000012a0000012a0000012a0000012a
0000012a0000022400000224000002240000022400000224000002240000
0224000002240000022400000224000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000002a6000002a6000002a6000002a6000002a60000
02a6000002a6000002a6000002a6000002a6000002a6000002a6000002a6
000002a6000002a6000003720000037200000372000003f2000003f20000
03f2000003f2000003f2000003f2000003f2000003f2000003f2000003f2
000003f2000003f2000003f2000003f2000003f2000003f2000003f20000
03f2000003f2000003f2000003f2000003f2000003f2000003f2000003f2
000003f2000003f2000003f2000003f2000003f2000003f2000003f20000
03f2000003f2000003f2000003f2000003f2000003f2000003f2000003f2
000003f2000003f2000003f2000003f2000003f2000003f2000003f20000
03f2000003f2000003f2000003f200000516000005160000051600000516
000005160000051600000516000005160000051600000516000006060000
060600000606000006060000060600000606000006060000060600000606
000006060000060600000606000006060000060600000606000006060000
060600000606000006060000060600000606000006060000060600000606
000006060000060600000606000006060000060600000606000006060000
060600000606000006060000060600000606000006060000060600000606
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a0000076a0000076a0000076a0000076a0000076a0000
076a0000076a0000076a0000076a0000076a0000076a0000076a0000076a
0000076a0000076a000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000007a6000007a6000007a6000007a6000007a6000007a6000007a60000
07a6000007a6000007a6000007a6000007a6000007a6000007a6000007a6
000008980000095000000a5000000a5000000a5000000b6c00000b6c0000
0b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c
00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c0000
0b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c
00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c0000
0b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c
00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c0000
0b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c
00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c0000
0b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c
00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c00000b6c0000
0b6c00000b6c00000b6c00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc
00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc00000bdc0000
0bdc00000bdc000100000f8f00b8000800d0000800020010002f00660000
024100dc000800010000000e00ae0000000300000000009e000000000003
000000070076009e0001000000000000004f011400010000000000030014
016300010000000000040014017700010000000000060014018b00010000
00000007003b019f0003000104090000009e01da0003000104090001001c
02780003000104090002000e02940003000104090003002802a200030001
04090004002802ca0003000104090006002802f200030001040900070076
031a00a9002000320030003100320020004d006900630072006f0073006f
0066007400200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e002000440065007300690067006e00650064
0020006200790020004c0075006300280061007300290020006400650020
00470072006f006f007400430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002ea92032303132204d6963726f736f667420436f72706f
726174696f6e2e20416c6c205269676874732052657365727665642e2044
657369676e6564206279204c7563286173292064652047726f6f744d484b
4549482b43616c696272692d4c696768744d484b4549482b43616c696272
692d4c696768744d484b4549482b43616c696272692d4c6967687443616c
6962726920697320612074726164656d61726b206f6620746865204d6963
726f736f66742067726f7570206f6620636f6d70616e6965732e00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e002000440065007300690067006e00650064002000620079
0020004c007500630028006100730029002000640065002000470072006f
006f0074004d0048004b004500490048002b00430061006c006900620072
00690052006500670075006c00610072004d0048004b004500490048002b
00430061006c0069006200720069002d004c0069006700680074004d0048
004b004500490048002b00430061006c0069006200720069002d004c0069
006700680074004d0048004b004500490048002b00430061006c00690062
00720069002d004c006900670068007400430061006c0069006200720069
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000670072006f007500700020006f006600200063006f006d
00700061006e006900650073002e0000409a09e2a4ff1fe1b1ff1fdb9471
1fd9d72e1fdad6691fd8d49d1fd7d62c1fd5d6371fd0ce1a1fcfce681fcd
ceae1fccce801f0fce016d1fce010fce013bcac8821fc9c88c1fc7c8361f
c6c24e1fc5c2581fc4c25f1fc3c2661fc1c26d1fc0c2801f00c210c220c2
036d20c230c20210c220c20200c210c2023b20c201bfba261fbeba3a1fbd
ba521fbcba6d1fbbba731fb9ba831fb8ba791f50ba01b8ffc0b3ba7a8246
b8ffc0b3ba686e46b8ffc0b3ba555a46b8ffc0b3ba424646b8ffc040ffba
2f3246b5b14b1fb4b15d1fb3b1631fb2b16a1fb0b1771fafb1821faeb15b
1fa6a4711fa5a47a1fa3a48c1f9f9d1d1f9e9d391f9c9d931f9998551f98
8c301f8a01895585032b1f8403471f825b805581ab80557f5b7d557eab7d
552f7d012f7d3f7d6f7d9f7dcf7dff7d06795b775578ab77551f778f779f
770377017a557c5b7a557bab7a55707a01885b865587ab86551f868f869f
8603860372555076607602760372556e666d55b06d015f6d6f6d7f6d036d
037255745b725573ab725540726072707280720472026f55715b6f5570ab
6f556f06011f6a032b1f6947675568ab67556647645565ab645563476255
614760554060015c475a555bab5a40495557032b1f5647545555ab545553
47515552ab51555106461f4f474e554e03251f4d474b554cab4b554a4748
5549ab485548022b1f4747465546012b1f24220a1f2322181f00030108b8
0100b316010501b80190b154532b2b4bb807ff524bb008505bb00188b025
53b00188b040515ab00688b000555a5b58b101018e59b21a01024354234b
515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0805358b040
1d594bb0ff5358b0001db1160042595e732b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b732b2b2b73732b2b732b732b
2b732b2b2b732b2b73742b2b2b2b2b2b2b2b2b012b2b2b002b2b2b012b2b
2b2b2b2b2b002b2b2b2b2b742b2b2b2b2b2b2b01755e7374755e732b2b2b
2b2b2b002b2b2b015e73745e732b2b2b2b002b2b012b2b2b002b2b012b18
5e00000000>
[3037 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1898 856 <000100a5fff9015000b9000b000fb500b60609034c003fcd012fed303125
1406232226353436333216015026312f2526312f255a3b26253a3b262500
>NBAAAA+Calibri-Light AddT42Char 
2 1958 1004 <00020050ffef03bf051f0013002b0076405569287928026a277a27024827
5827026523752302651d751d02471d571d026a187a1802b7120187110106
1101080d01670c770c02b8080109070107030108590269020214c3400001
0020c30a2c1bb90f5325b90556003fed3fed0110deedd45ded30315d5e5d
5d5d5d5d5d5d5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e02
07342e0423220e0215141e0233323e0403bf2e6bad7f75a3652d2e6aad7f
75a3662d800f2031455837637b4518224a74534262462e1a0a028992f4b1
6355a8f7a291f5b16355a8f7ad63a17e5d3d1d5d9ac66a94d78b432a4c68
7a88>NBAAAA+Calibri-Light AddT42Char 
2 2384 1006 <000100800000038b051f003e005440312731010531153102088919991902
78190178130116c333253325330039c50b1138392020391bba3316062e53
1039ba0654003fed323f123939ed11392f123939012fedcd39392f2f10ed
30315d5d5d5e5d5d25140e022321222e0235343e0237013e0335342e0223
220e0223222e0235343e0633321e0215140e02070721321e02038b05090e
09fd4509100c0602060a08010963753e131f3c593a3f644b320c060a0703
02040717375466375b875a2c1545836dec0250080e0a05380c150f08060d
160f0d14101009011868a4846c3030574127232b23060d140d0c100d0c14
222319365c79433e7b91b073f7070e14>NBAAAA+Calibri-Light AddT42Char 
2 2640 1009 <00010068ffef0387050e003e0072404b973da73db73d03053d01973ca73c
b73c038b20018b1a01781a0106020137c17028802802283228320e1dc300
0e3f0aba13131836ba2c3ab9002230226022702204082222052c5118ba05
56003fed3f12392f5e5ded10ed11392fed0110ded4ed1239392f2f5ded30
315d5d5d5d5d5d5d01140e0223222e0635343e0233321e0233323e023534
2e02232206232226351134363321321e02151406232111363633321e0203
87447cad683c6c54350e05040203070a060a2b4a6d4b477a5a332c5a895c
3f55241a181f1a0227080e0a051312fe11234b3572a96f37019d67a06e39
1319190d090d130d0c140e071a1f1a234c7553466946220d192401fc1c1f
070e140d1720fe66050237628800>NBAAAA+Calibri-Light AddT42Char 
2 2924 1089 <00020064014a03980337000d001b0018400a000e07150ba50411a518002f
edd6ed012f33cd3230310114062321222635343633213216111406232122
26353436332132160398170bfd0f0b16130e02f10e14170bfd0f0b16130e
02f10e1402fe201818201d1c1cfe67201818201d1c1c>NBAAAA+Calibri-Light AddT42Char 
2 298 90 <000200bdfffa03e7050e003600440036401c102e11290ac30037c3293f11
c21c2e10ba4040173dba215117550555003f3f3fed12392fed39012fed32
d4edd4ed11123939303125140e0223222e0227032e03232311140e022322
2e023511343633333216171e0315140e02071e0317131616033426272626
23231133323e0203e7050e19131117100a0479153044604386060e171211
180e062612f3303f1a4a6e482324425c3721352d2814790d07d74a571d44
37a0ba4b6c472116070a070403090f0c013a355e4528fdb9060a06040406
0a0604bb241b05040d3a556b3e40654d38130f2c3e5132fed2231a039753
73190807fe2525405600>NBAAAA+Calibri-Light AddT42Char 
2 548 100 <00010011fffa03cd050e0022001a400c0006c218110612ba1d510c55003f
3fed32012fc4fdcd303101140e02232111140e0223222e02351121222e02
35343e023321321e0203cd04080c07fe7e060e181111180e06fe7e080b08
0404080b08037e070c080404d60d140d07fb73060a060404060a06048d07
0d140d0e150e07070e15>NBAAAA+Calibri-Light AddT42Char 
2 678 346 <000100a7fffa038505720032003d4026262f362f462f03002f102f020847
2b014612010bb1322a14b11e2a1910a42d4a2446194c054c003f3f3f3fed
1239012fed32d4ed30315d5d5e5d5d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e02150385
060d171112170d061a345136458a4c060d171211170e05050e171112170d
064a944a597a4b2114060a060404060a06021954694b29625ffd77060a06
0404060a060544060a070303070a06fdcb524d3c66886000>NBAAAA+Calibri-Light AddT42Char 
2 882 349 <00020094fffa0130051f00150021001b400d16b51c15b10a1fa919104905
4c003f3fdeed012fedd4ed303125140e0223222e023511343e0233321e02
15131406232226353436333216011e060d171211170e05050e171112170d
0612222d2c21222d2c2114060a060404060a060389060a070303070a0601
3130222130302221>NBAAAA+Calibri-Light AddT42Char 
2 1010 400 <00010055ffef02bb03c200490066403e87489748021a26010b2601150201
04020141b0242432320c1bb1000001000c4a2ea4370aa511603770370250
110137113711163ca4411b05294a16a4054d003fed3f123939ed1139392f
2f5d5d10ed10ed0110ded45ded12392f322fed30315d5d5d5d5d01140e02
23222e0435343e0233321e0233323e0235342e0635343e0233321e061514
0e0223222e0223220e0215141e0602bb30597c4b2f54442f160a04060a06
0b2a3f57392e4c381f28415357534128244b755022433728150703020306
0906082034482f2f472e17284254575442280105416748260f171a141e19
0d140e071c211c14283f2a2a3a2b21232a3c543b2f5b482c0b1215100b0c
110c0c130e07161a16162836202c3c2c2222293a5100>NBAAAA+Calibri-Light AddT42Char 
2 1302 410 <00010027fff1025b04aa003a005540380a100d10482b0a3b0a4b0a030d0a
1d0a02232db117000d100d020d0d112929000f111f113f114f110408112d
a423491d0da4174931a4074d003fed3fedcd3fed012f5e5dc4322f12392f
5d33ed3230315d5d2b25140e0423222e02351123222635343e0233333534
3e0233321e02151533321e02151406232311141633323e0233321e02025b
070f1d262a14435e3c1b870e1004080b0787050e171112170d06fa070b08
04110dfa3b4e18271e1508050805034a151a0f0d09052449704c02331919
0d130d06de060a070303070a06de060d130d1919fddd676c0a0c0a040b11
>NBAAAA+Calibri-Light AddT42Char 
2 1542 449 <0001003ffffa055803b700450092405b39100c10481a392a39022b100d10
48282b01192b01481c01361c01261201480e01290e013904011c1d122e2c
2c102ab11d10380e01380e1004033a3a103cb0700301032f105f10021b10
0110414933493a2c1003172549174c094c003f3f3f1217393f3f01192f5d
5dd45d18ed1239192f12391239395d10d418ed1239192f3939123930315d
5d5d5d5d5d5d5d2b5d2b01140607010e0323222e0227032707030e032322
2e022701262635343e0233321e0217131737133e0333321e021713173713
3e0333321e0205580302fee8020b121d14151e130b02d20202c4020c151e
13141c130a02feea0303060e1610151a0d0602ef0202d902070d17121116
0e0602ea0201ee02070e191410140c04039f050d08fc8f080a060203060a
0702ca0808fd36080a060203060a070371070e05070a050203060a07fcea
07070316070a060303060a07fcea07070316070a060302060900>NBAAAA+Calibri-Light AddT42Char 
2 0 0 <0004002e000003cd050e000300070039004d004a40242d07023ab2440ead
1744174417020120ae080401021f08010323350603511911493f0401002f
dddedddecd3fdddecd11123939012fdddddeed111239392f2f10ed10ed10
ddce3031011121110111211101140e020707140623222e02352734363333
323e0235342623220e0223222e02353436373e0333321e0203140e022322
2e0235343e0233321e0203cdfc610353fcf60281244158340516150a0e0a
05041a1514314128115862273f3020070307050305080728374321456643
22e0060e171112180f06060f181211170e06050efaf2050efb380482fb7e
03163c5e402301aa080702040504c817151b2e4024505c11151103090f0c
0c13080713120d26425afd7c12180f06060f181212180f06060f1800>NBAAAA+Calibri-Light AddT42Char 
NBAAAA+Calibri-Light /CharStrings get begin
/period 856 def
/zero 1004 def
/two 1006 def
/five 1009 def
/equal 1089 def
/R 90 def
/T 100 def
/h 346 def
/i 349 def
/s 400 def
/t 410 def
/w 449 def
end
NBAAAA+Calibri-Light /Encoding get
dup 46 /period put
dup 48 /zero put
dup 50 /two put
dup 53 /five put
dup 61 /equal put
dup 82 /R put
dup 84 /T put
dup 104 /h put
dup 105 /i put
dup 115 /s put
dup 116 /t put
dup 119 /w put
pop
end
%ADOEndSubsetFont
/WAYZIM+Calibri-Light /NBAAAA+Calibri-Light findfont ct_VMDictPut
/WAYZIM+Calibri-Light*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five 
7{/.notdef}rp /equal 20{/.notdef}rp /R /.notdef /T 19{/.notdef}rp /h 
/i 9{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
WAYZIM+Calibri-Light nf
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
73.8392 585.91 mo
(withRTT)
[-11.0209 -3.47778 -5.18207 -11.8871 -8.21661 -7.8537 0 ]ysh
%ADOBeginSubsetFont: LBAAAA+Calibri-Light-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LBAAAA+Calibri-Light)
%%Title: (LBAAAA+Calibri-Light Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LBAAAA+Calibri-Light def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-511 -269 1208 952} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3983 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A08653BCDE3B590FC9ABD06CE8747EFFE2CC3C39F252DAE
FBE1FCFF90373C83C4778FCF40F84DB124E4DC9038B0F3C2D8CEE066C4AD2EB9
B7626F6CF7BE6B693C47F502D759403BAF80F1694031A907B20F73CB59A7A501
6968FBA7DDFD620DFE79B7DD54032189F88C560EA126F4D3DC172A3F0E5D445E
D83DAEAC6F6D3EDB44E8000721DBEEA8E5BCCD55AE21B218C31C6F77E8D59115
4043A458F1A93F02BBC6FC3F68AADD3C64FEC906AD824A6BB77DFC4938E625E3
3511CA7C2BEA1F6DB0611252B53639FB6DC06D456BD61EB0E9ABC905268795F5
B77641A7D59CDA52ED601F624A653809E7C763C3D7FC2A47257790898FB33A33
3915916A745A45F25DE5F9728AEDE2B58EB042020A60C68B8451B005EC59C927
B070CE508CDB4FAA2371D687C12C9426A756E3DDE896FEBB78776AFBCEA42E9A
53AAF9FFFE80D78796E782A5E03DE20833648C6A8562CADB12AA7D3B4436B1D0
82060B59D0E3B223C3AC55275D7C6BD19A49D71D77EEDA4B9E2D03A1FC8C1EB9
E548B36ED9D56A5F53EEA0057FF978414C607781215069540F43F346BBBE3106
70D13580CB69C> |
3 <001C60D8A8C9B888C146> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LBAAAA+Calibri-Light-Identity-H /Identity-H 0 [/LBAAAA+Calibri-Light] ct_ComposeFont pop end end
%ADOEndSubsetFont
/WAYZIN+Calibri-Light /LBAAAA+Calibri-Light-Identity-H findfont ct_VMDictPut
WAYZIN+Calibri-Light [0 -15.78 -15.78 0 0 0 ]msf
73.8392 530.65 mo
(\000\003)sh
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
73.8392 526.871 mo
(=)sh
WAYZIN+Calibri-Light [0 -15.78 -15.78 0 0 0 ]msf
73.8392 519.011 mo
(\000\003)sh
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
73.8392 515.351 mo
(0.025)
[-7.98315 -3.84866 -7.98318 -7.98315 0 ]ysh
WAYZIN+Calibri-Light [0 -15.78 -15.78 0 0 0 ]msf
73.8392 479.591 mo
(\000\003)sh
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
73.8392 475.931 mo
(s)sh
.874144 .544152 0 .000335698 cmyk
WAYZIL+Cambria [0 -15.78 -15.78 0 0 0 ]msf
120.819 440.592 mo
(\0079\022:\007P\022;)
[-15.6047 -6.59915 -6.60712 0 ]ysh
0 .990631 1 .000396735 cmyk
WAYZIL+Cambria [0 -15.78 -15.78 0 0 0 ]msf
179.199 265.151 mo
(\0079)sh
WAYZIL+Cambria [0 -11.52 -11.52 0 0 0 ]msf
182.439 252.25 mo
(\013E\013M\013Q\013H)
[-8.03302 -4.17377 -10.337 0 ]ysh
WAYZIL+Cambria [0 -15.78 -15.78 0 0 0 ]msf
179.199 220.63 mo
(\022:\007P\022;)
[-6.53918 -6.60712 0 ]ysh
%ADOBeginSubsetFont: NBAAAA+Calibri-Light AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WAYZIM+Calibri-Light gcheck setglobal} if
2 2200 1005 <000100bd000003960516002e002f401a0029c21e1f1801181f0b010b1011
01111312bd23522910b90654003fed323ffdc6012f5dcd5dc45d33fdcd30
3125140e022321222e0235343e02332111050606262635343e0237253e03
33321e02151133321e020396060a0c06fd70060b0a0605090c07011ffeee
10140c04020609070136030a0e100b11180e06f6070d0905320e130c0505
0c130e0c140d070426a70a030a17100d130e0a05c60204030104060a06fb
6a070d14>WAYZIM+Calibri-Light AddT42Char 
WAYZIM+Calibri-Light /CharStrings get begin
/one 1005 def
end
WAYZIM+Calibri-Light /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WAYZIM+Calibri-Light*1 
[46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 
7{/.notdef}rp /equal 20{/.notdef}rp /R /.notdef /T 19{/.notdef}rp /h 
/i 9{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
WAYZIM+Calibri-Light nf
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
198.099 277.63 mo
(withRTT)
[-11.0208 -3.47778 -5.18207 -11.8871 -8.21661 -7.85376 0 ]ysh
WAYZIN+Calibri-Light [0 -15.78 -15.78 0 0 0 ]msf
198.099 222.37 mo
(\000\003)sh
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
198.099 218.591 mo
(=)sh
WAYZIN+Calibri-Light [0 -15.78 -15.78 0 0 0 ]msf
198.099 210.731 mo
(\000\003)sh
WAYZIM+Calibri-Light*1 [0 -15.78 -15.78 0 0 0 ]msf
198.099 207.072 mo
(1s)
[-11.5826 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 /1 /2 /3 ]]
] del_res
/WAYZIM+Calibri-Light*1 uf
/WAYZIM+Calibri-Light uf
/NBAAAA+Calibri-Light uf
/WAYZIN+Calibri-Light-Identity-H uf
/WAYZIN+Calibri-Light /CIDFont ur
/WAYZIL+Cambria-Identity-H uf
/WAYZIL+Cambria /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
